# coding: utf-8

"""
    GTEx Portal API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, List, Optional
from typing_extensions import Annotated
from gtex_openapi.models.app_models_request_parameters_hardy_scale import AppModelsRequestParametersHardyScale
from gtex_openapi.models.app_models_request_parameters_material_type import AppModelsRequestParametersMaterialType
from gtex_openapi.models.biobank_response import BiobankResponse
from gtex_openapi.models.biobank_sample import BiobankSample
from gtex_openapi.models.donor_age_bracket import DonorAgeBracket
from gtex_openapi.models.donor_sex import DonorSex
from gtex_openapi.models.path_category import PathCategory
from gtex_openapi.models.tissuesitedetailid_inner import TissuesitedetailidInner

from gtex_openapi.api_client import ApiClient, RequestSerialized
from gtex_openapi.api_response import ApiResponse
from gtex_openapi.rest import RESTResponseType


class BiobankDataEndpointsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def download_api_v2_biobank_download_get(
        self,
        material_type: Optional[List[AppModelsRequestParametersMaterialType]] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="Tissues of interest")] = None,
        path_category: Annotated[Optional[List[PathCategory]], Field(description="A list of Pathology Category(s)")] = None,
        tissue_sample_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="A list of Tissue Sample ID(s)")] = None,
        sex: Optional[DonorSex] = None,
        sort_by: Optional[Any] = None,
        sort_direction: Optional[Any] = None,
        search_term: Optional[StrictStr] = None,
        sample_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="GTEx sample ID")] = None,
        subject_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="GTEx subject ID")] = None,
        age_bracket: Annotated[Optional[List[DonorAgeBracket]], Field(description="The age bracket(s) of the donors of interest")] = None,
        hardy_scale: Annotated[Optional[List[AppModelsRequestParametersHardyScale]], Field(description="A list of Hardy Scale(s) of interest")] = None,
        has_expression_data: Optional[StrictBool] = None,
        has_genotype: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[BiobankSample]:
        """Download


        :param material_type:
        :type material_type: List[AppModelsRequestParametersMaterialType]
        :param tissue_site_detail_id: Tissues of interest
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param path_category: A list of Pathology Category(s)
        :type path_category: List[PathCategory]
        :param tissue_sample_id: A list of Tissue Sample ID(s)
        :type tissue_sample_id: List[str]
        :param sex:
        :type sex: DonorSex
        :param sort_by:
        :type sort_by: SortBy
        :param sort_direction:
        :type sort_direction: SortDirection
        :param search_term:
        :type search_term: str
        :param sample_id: GTEx sample ID
        :type sample_id: List[str]
        :param subject_id: GTEx subject ID
        :type subject_id: List[str]
        :param age_bracket: The age bracket(s) of the donors of interest
        :type age_bracket: List[DonorAgeBracket]
        :param hardy_scale: A list of Hardy Scale(s) of interest
        :type hardy_scale: List[AppModelsRequestParametersHardyScale]
        :param has_expression_data:
        :type has_expression_data: bool
        :param has_genotype:
        :type has_genotype: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._download_api_v2_biobank_download_get_serialize(
            material_type=material_type,
            tissue_site_detail_id=tissue_site_detail_id,
            path_category=path_category,
            tissue_sample_id=tissue_sample_id,
            sex=sex,
            sort_by=sort_by,
            sort_direction=sort_direction,
            search_term=search_term,
            sample_id=sample_id,
            subject_id=subject_id,
            age_bracket=age_bracket,
            hardy_scale=hardy_scale,
            has_expression_data=has_expression_data,
            has_genotype=has_genotype,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[BiobankSample]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def download_api_v2_biobank_download_get_with_http_info(
        self,
        material_type: Optional[List[AppModelsRequestParametersMaterialType]] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="Tissues of interest")] = None,
        path_category: Annotated[Optional[List[PathCategory]], Field(description="A list of Pathology Category(s)")] = None,
        tissue_sample_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="A list of Tissue Sample ID(s)")] = None,
        sex: Optional[DonorSex] = None,
        sort_by: Optional[Any] = None,
        sort_direction: Optional[Any] = None,
        search_term: Optional[StrictStr] = None,
        sample_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="GTEx sample ID")] = None,
        subject_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="GTEx subject ID")] = None,
        age_bracket: Annotated[Optional[List[DonorAgeBracket]], Field(description="The age bracket(s) of the donors of interest")] = None,
        hardy_scale: Annotated[Optional[List[AppModelsRequestParametersHardyScale]], Field(description="A list of Hardy Scale(s) of interest")] = None,
        has_expression_data: Optional[StrictBool] = None,
        has_genotype: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[BiobankSample]]:
        """Download


        :param material_type:
        :type material_type: List[AppModelsRequestParametersMaterialType]
        :param tissue_site_detail_id: Tissues of interest
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param path_category: A list of Pathology Category(s)
        :type path_category: List[PathCategory]
        :param tissue_sample_id: A list of Tissue Sample ID(s)
        :type tissue_sample_id: List[str]
        :param sex:
        :type sex: DonorSex
        :param sort_by:
        :type sort_by: SortBy
        :param sort_direction:
        :type sort_direction: SortDirection
        :param search_term:
        :type search_term: str
        :param sample_id: GTEx sample ID
        :type sample_id: List[str]
        :param subject_id: GTEx subject ID
        :type subject_id: List[str]
        :param age_bracket: The age bracket(s) of the donors of interest
        :type age_bracket: List[DonorAgeBracket]
        :param hardy_scale: A list of Hardy Scale(s) of interest
        :type hardy_scale: List[AppModelsRequestParametersHardyScale]
        :param has_expression_data:
        :type has_expression_data: bool
        :param has_genotype:
        :type has_genotype: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._download_api_v2_biobank_download_get_serialize(
            material_type=material_type,
            tissue_site_detail_id=tissue_site_detail_id,
            path_category=path_category,
            tissue_sample_id=tissue_sample_id,
            sex=sex,
            sort_by=sort_by,
            sort_direction=sort_direction,
            search_term=search_term,
            sample_id=sample_id,
            subject_id=subject_id,
            age_bracket=age_bracket,
            hardy_scale=hardy_scale,
            has_expression_data=has_expression_data,
            has_genotype=has_genotype,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[BiobankSample]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def download_api_v2_biobank_download_get_without_preload_content(
        self,
        material_type: Optional[List[AppModelsRequestParametersMaterialType]] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="Tissues of interest")] = None,
        path_category: Annotated[Optional[List[PathCategory]], Field(description="A list of Pathology Category(s)")] = None,
        tissue_sample_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="A list of Tissue Sample ID(s)")] = None,
        sex: Optional[DonorSex] = None,
        sort_by: Optional[Any] = None,
        sort_direction: Optional[Any] = None,
        search_term: Optional[StrictStr] = None,
        sample_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="GTEx sample ID")] = None,
        subject_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="GTEx subject ID")] = None,
        age_bracket: Annotated[Optional[List[DonorAgeBracket]], Field(description="The age bracket(s) of the donors of interest")] = None,
        hardy_scale: Annotated[Optional[List[AppModelsRequestParametersHardyScale]], Field(description="A list of Hardy Scale(s) of interest")] = None,
        has_expression_data: Optional[StrictBool] = None,
        has_genotype: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Download


        :param material_type:
        :type material_type: List[AppModelsRequestParametersMaterialType]
        :param tissue_site_detail_id: Tissues of interest
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param path_category: A list of Pathology Category(s)
        :type path_category: List[PathCategory]
        :param tissue_sample_id: A list of Tissue Sample ID(s)
        :type tissue_sample_id: List[str]
        :param sex:
        :type sex: DonorSex
        :param sort_by:
        :type sort_by: SortBy
        :param sort_direction:
        :type sort_direction: SortDirection
        :param search_term:
        :type search_term: str
        :param sample_id: GTEx sample ID
        :type sample_id: List[str]
        :param subject_id: GTEx subject ID
        :type subject_id: List[str]
        :param age_bracket: The age bracket(s) of the donors of interest
        :type age_bracket: List[DonorAgeBracket]
        :param hardy_scale: A list of Hardy Scale(s) of interest
        :type hardy_scale: List[AppModelsRequestParametersHardyScale]
        :param has_expression_data:
        :type has_expression_data: bool
        :param has_genotype:
        :type has_genotype: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._download_api_v2_biobank_download_get_serialize(
            material_type=material_type,
            tissue_site_detail_id=tissue_site_detail_id,
            path_category=path_category,
            tissue_sample_id=tissue_sample_id,
            sex=sex,
            sort_by=sort_by,
            sort_direction=sort_direction,
            search_term=search_term,
            sample_id=sample_id,
            subject_id=subject_id,
            age_bracket=age_bracket,
            hardy_scale=hardy_scale,
            has_expression_data=has_expression_data,
            has_genotype=has_genotype,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[BiobankSample]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _download_api_v2_biobank_download_get_serialize(
        self,
        material_type,
        tissue_site_detail_id,
        path_category,
        tissue_sample_id,
        sex,
        sort_by,
        sort_direction,
        search_term,
        sample_id,
        subject_id,
        age_bracket,
        hardy_scale,
        has_expression_data,
        has_genotype,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'materialType': 'multi',
            'tissueSiteDetailId': 'multi',
            'pathCategory': 'multi',
            'tissueSampleId': 'multi',
            'sampleId': 'multi',
            'subjectId': 'multi',
            'ageBracket': 'multi',
            'hardyScale': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if material_type is not None:
            
            _query_params.append(('materialType', material_type))
            
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        if path_category is not None:
            
            _query_params.append(('pathCategory', path_category))
            
        if tissue_sample_id is not None:
            
            _query_params.append(('tissueSampleId', tissue_sample_id))
            
        if sex is not None:
            
            _query_params.append(('sex', sex.value))
            
        if sort_by is not None:
            
            _query_params.append(('sortBy', sort_by.value))
            
        if sort_direction is not None:
            
            _query_params.append(('sortDirection', sort_direction.value))
            
        if search_term is not None:
            
            _query_params.append(('searchTerm', search_term))
            
        if sample_id is not None:
            
            _query_params.append(('sampleId', sample_id))
            
        if subject_id is not None:
            
            _query_params.append(('subjectId', subject_id))
            
        if age_bracket is not None:
            
            _query_params.append(('ageBracket', age_bracket))
            
        if hardy_scale is not None:
            
            _query_params.append(('hardyScale', hardy_scale))
            
        if has_expression_data is not None:
            
            _query_params.append(('hasExpressionData', has_expression_data))
            
        if has_genotype is not None:
            
            _query_params.append(('hasGenotype', has_genotype))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/biobank/download',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_sample_api_v2_biobank_sample_get(
        self,
        draw: Optional[StrictInt] = None,
        material_type: Optional[List[AppModelsRequestParametersMaterialType]] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="Tissues of interest")] = None,
        path_category: Annotated[Optional[List[PathCategory]], Field(description="A list of Pathology Category(s)")] = None,
        tissue_sample_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="A list of Tissue Sample ID(s)")] = None,
        sex: Optional[DonorSex] = None,
        sort_by: Optional[Any] = None,
        sort_direction: Optional[Any] = None,
        search_term: Optional[StrictStr] = None,
        sample_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="GTEx sample ID")] = None,
        subject_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="GTEx subject ID")] = None,
        age_bracket: Annotated[Optional[List[DonorAgeBracket]], Field(description="The age bracket(s) of the donors of interest")] = None,
        hardy_scale: Annotated[Optional[List[AppModelsRequestParametersHardyScale]], Field(description="A list of Hardy Scale(s) of interest")] = None,
        has_expression_data: Optional[StrictBool] = None,
        has_genotype: Optional[StrictBool] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BiobankResponse:
        """Get Sample


        :param draw:
        :type draw: int
        :param material_type:
        :type material_type: List[AppModelsRequestParametersMaterialType]
        :param tissue_site_detail_id: Tissues of interest
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param path_category: A list of Pathology Category(s)
        :type path_category: List[PathCategory]
        :param tissue_sample_id: A list of Tissue Sample ID(s)
        :type tissue_sample_id: List[str]
        :param sex:
        :type sex: DonorSex
        :param sort_by:
        :type sort_by: SortBy
        :param sort_direction:
        :type sort_direction: SortDirection
        :param search_term:
        :type search_term: str
        :param sample_id: GTEx sample ID
        :type sample_id: List[str]
        :param subject_id: GTEx subject ID
        :type subject_id: List[str]
        :param age_bracket: The age bracket(s) of the donors of interest
        :type age_bracket: List[DonorAgeBracket]
        :param hardy_scale: A list of Hardy Scale(s) of interest
        :type hardy_scale: List[AppModelsRequestParametersHardyScale]
        :param has_expression_data:
        :type has_expression_data: bool
        :param has_genotype:
        :type has_genotype: bool
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sample_api_v2_biobank_sample_get_serialize(
            draw=draw,
            material_type=material_type,
            tissue_site_detail_id=tissue_site_detail_id,
            path_category=path_category,
            tissue_sample_id=tissue_sample_id,
            sex=sex,
            sort_by=sort_by,
            sort_direction=sort_direction,
            search_term=search_term,
            sample_id=sample_id,
            subject_id=subject_id,
            age_bracket=age_bracket,
            hardy_scale=hardy_scale,
            has_expression_data=has_expression_data,
            has_genotype=has_genotype,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BiobankResponse",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_sample_api_v2_biobank_sample_get_with_http_info(
        self,
        draw: Optional[StrictInt] = None,
        material_type: Optional[List[AppModelsRequestParametersMaterialType]] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="Tissues of interest")] = None,
        path_category: Annotated[Optional[List[PathCategory]], Field(description="A list of Pathology Category(s)")] = None,
        tissue_sample_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="A list of Tissue Sample ID(s)")] = None,
        sex: Optional[DonorSex] = None,
        sort_by: Optional[Any] = None,
        sort_direction: Optional[Any] = None,
        search_term: Optional[StrictStr] = None,
        sample_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="GTEx sample ID")] = None,
        subject_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="GTEx subject ID")] = None,
        age_bracket: Annotated[Optional[List[DonorAgeBracket]], Field(description="The age bracket(s) of the donors of interest")] = None,
        hardy_scale: Annotated[Optional[List[AppModelsRequestParametersHardyScale]], Field(description="A list of Hardy Scale(s) of interest")] = None,
        has_expression_data: Optional[StrictBool] = None,
        has_genotype: Optional[StrictBool] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BiobankResponse]:
        """Get Sample


        :param draw:
        :type draw: int
        :param material_type:
        :type material_type: List[AppModelsRequestParametersMaterialType]
        :param tissue_site_detail_id: Tissues of interest
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param path_category: A list of Pathology Category(s)
        :type path_category: List[PathCategory]
        :param tissue_sample_id: A list of Tissue Sample ID(s)
        :type tissue_sample_id: List[str]
        :param sex:
        :type sex: DonorSex
        :param sort_by:
        :type sort_by: SortBy
        :param sort_direction:
        :type sort_direction: SortDirection
        :param search_term:
        :type search_term: str
        :param sample_id: GTEx sample ID
        :type sample_id: List[str]
        :param subject_id: GTEx subject ID
        :type subject_id: List[str]
        :param age_bracket: The age bracket(s) of the donors of interest
        :type age_bracket: List[DonorAgeBracket]
        :param hardy_scale: A list of Hardy Scale(s) of interest
        :type hardy_scale: List[AppModelsRequestParametersHardyScale]
        :param has_expression_data:
        :type has_expression_data: bool
        :param has_genotype:
        :type has_genotype: bool
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sample_api_v2_biobank_sample_get_serialize(
            draw=draw,
            material_type=material_type,
            tissue_site_detail_id=tissue_site_detail_id,
            path_category=path_category,
            tissue_sample_id=tissue_sample_id,
            sex=sex,
            sort_by=sort_by,
            sort_direction=sort_direction,
            search_term=search_term,
            sample_id=sample_id,
            subject_id=subject_id,
            age_bracket=age_bracket,
            hardy_scale=hardy_scale,
            has_expression_data=has_expression_data,
            has_genotype=has_genotype,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BiobankResponse",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_sample_api_v2_biobank_sample_get_without_preload_content(
        self,
        draw: Optional[StrictInt] = None,
        material_type: Optional[List[AppModelsRequestParametersMaterialType]] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="Tissues of interest")] = None,
        path_category: Annotated[Optional[List[PathCategory]], Field(description="A list of Pathology Category(s)")] = None,
        tissue_sample_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="A list of Tissue Sample ID(s)")] = None,
        sex: Optional[DonorSex] = None,
        sort_by: Optional[Any] = None,
        sort_direction: Optional[Any] = None,
        search_term: Optional[StrictStr] = None,
        sample_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="GTEx sample ID")] = None,
        subject_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="GTEx subject ID")] = None,
        age_bracket: Annotated[Optional[List[DonorAgeBracket]], Field(description="The age bracket(s) of the donors of interest")] = None,
        hardy_scale: Annotated[Optional[List[AppModelsRequestParametersHardyScale]], Field(description="A list of Hardy Scale(s) of interest")] = None,
        has_expression_data: Optional[StrictBool] = None,
        has_genotype: Optional[StrictBool] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Sample


        :param draw:
        :type draw: int
        :param material_type:
        :type material_type: List[AppModelsRequestParametersMaterialType]
        :param tissue_site_detail_id: Tissues of interest
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param path_category: A list of Pathology Category(s)
        :type path_category: List[PathCategory]
        :param tissue_sample_id: A list of Tissue Sample ID(s)
        :type tissue_sample_id: List[str]
        :param sex:
        :type sex: DonorSex
        :param sort_by:
        :type sort_by: SortBy
        :param sort_direction:
        :type sort_direction: SortDirection
        :param search_term:
        :type search_term: str
        :param sample_id: GTEx sample ID
        :type sample_id: List[str]
        :param subject_id: GTEx subject ID
        :type subject_id: List[str]
        :param age_bracket: The age bracket(s) of the donors of interest
        :type age_bracket: List[DonorAgeBracket]
        :param hardy_scale: A list of Hardy Scale(s) of interest
        :type hardy_scale: List[AppModelsRequestParametersHardyScale]
        :param has_expression_data:
        :type has_expression_data: bool
        :param has_genotype:
        :type has_genotype: bool
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sample_api_v2_biobank_sample_get_serialize(
            draw=draw,
            material_type=material_type,
            tissue_site_detail_id=tissue_site_detail_id,
            path_category=path_category,
            tissue_sample_id=tissue_sample_id,
            sex=sex,
            sort_by=sort_by,
            sort_direction=sort_direction,
            search_term=search_term,
            sample_id=sample_id,
            subject_id=subject_id,
            age_bracket=age_bracket,
            hardy_scale=hardy_scale,
            has_expression_data=has_expression_data,
            has_genotype=has_genotype,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BiobankResponse",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_sample_api_v2_biobank_sample_get_serialize(
        self,
        draw,
        material_type,
        tissue_site_detail_id,
        path_category,
        tissue_sample_id,
        sex,
        sort_by,
        sort_direction,
        search_term,
        sample_id,
        subject_id,
        age_bracket,
        hardy_scale,
        has_expression_data,
        has_genotype,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'materialType': 'multi',
            'tissueSiteDetailId': 'multi',
            'pathCategory': 'multi',
            'tissueSampleId': 'multi',
            'sampleId': 'multi',
            'subjectId': 'multi',
            'ageBracket': 'multi',
            'hardyScale': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if draw is not None:
            
            _query_params.append(('draw', draw))
            
        if material_type is not None:
            
            _query_params.append(('materialType', material_type))
            
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        if path_category is not None:
            
            _query_params.append(('pathCategory', path_category))
            
        if tissue_sample_id is not None:
            
            _query_params.append(('tissueSampleId', tissue_sample_id))
            
        if sex is not None:
            
            _query_params.append(('sex', sex.value))
            
        if sort_by is not None:
            
            _query_params.append(('sortBy', sort_by.value))
            
        if sort_direction is not None:
            
            _query_params.append(('sortDirection', sort_direction.value))
            
        if search_term is not None:
            
            _query_params.append(('searchTerm', search_term))
            
        if sample_id is not None:
            
            _query_params.append(('sampleId', sample_id))
            
        if subject_id is not None:
            
            _query_params.append(('subjectId', subject_id))
            
        if age_bracket is not None:
            
            _query_params.append(('ageBracket', age_bracket))
            
        if hardy_scale is not None:
            
            _query_params.append(('hardyScale', hardy_scale))
            
        if has_expression_data is not None:
            
            _query_params.append(('hasExpressionData', has_expression_data))
            
        if has_genotype is not None:
            
            _query_params.append(('hasGenotype', has_genotype))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/biobank/sample',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


