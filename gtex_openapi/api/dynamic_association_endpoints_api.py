# coding: utf-8

"""
    GTEx Portal API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Any, List, Optional
from typing_extensions import Annotated
from gtex_openapi.models.cell_type import CellType
from gtex_openapi.models.dynamic_eqtl_body import DynamicEqtlBody
from gtex_openapi.models.eqtl import Eqtl
from gtex_openapi.models.i_eqtl import IEqtl
from gtex_openapi.models.i_sqtl import ISqtl
from gtex_openapi.models.post_dynamic_eqtl_result import PostDynamicEqtlResult
from gtex_openapi.models.sqtl import Sqtl

from gtex_openapi.api_client import ApiClient, RequestSerialized
from gtex_openapi.api_response import ApiResponse
from gtex_openapi.rest import RESTResponseType


class DynamicAssociationEndpointsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def bulk_calculate_expression_quantitative_trait_loci_api_v2_association_dyneqtl_post(
        self,
        dynamic_eqtl_body: Annotated[List[DynamicEqtlBody], Field(min_length=1)],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostDynamicEqtlResult:
        """Bulk Calculate Expression Quantitative Trait Loci

        Calculate your own eQTLs  - This service calculates the gene-variant association for any given pair of gene and variant, which may or may not be significant. - This requires as input a GENCODE ID, GTEx variant ID, and tissue site detail ID.  By default, the calculation is based on the latest GTEx release.

        :param dynamic_eqtl_body: (required)
        :type dynamic_eqtl_body: List[DynamicEqtlBody]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bulk_calculate_expression_quantitative_trait_loci_api_v2_association_dyneqtl_post_serialize(
            dynamic_eqtl_body=dynamic_eqtl_body,
            dataset_id=dataset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostDynamicEqtlResult",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def bulk_calculate_expression_quantitative_trait_loci_api_v2_association_dyneqtl_post_with_http_info(
        self,
        dynamic_eqtl_body: Annotated[List[DynamicEqtlBody], Field(min_length=1)],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostDynamicEqtlResult]:
        """Bulk Calculate Expression Quantitative Trait Loci

        Calculate your own eQTLs  - This service calculates the gene-variant association for any given pair of gene and variant, which may or may not be significant. - This requires as input a GENCODE ID, GTEx variant ID, and tissue site detail ID.  By default, the calculation is based on the latest GTEx release.

        :param dynamic_eqtl_body: (required)
        :type dynamic_eqtl_body: List[DynamicEqtlBody]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bulk_calculate_expression_quantitative_trait_loci_api_v2_association_dyneqtl_post_serialize(
            dynamic_eqtl_body=dynamic_eqtl_body,
            dataset_id=dataset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostDynamicEqtlResult",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def bulk_calculate_expression_quantitative_trait_loci_api_v2_association_dyneqtl_post_without_preload_content(
        self,
        dynamic_eqtl_body: Annotated[List[DynamicEqtlBody], Field(min_length=1)],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Bulk Calculate Expression Quantitative Trait Loci

        Calculate your own eQTLs  - This service calculates the gene-variant association for any given pair of gene and variant, which may or may not be significant. - This requires as input a GENCODE ID, GTEx variant ID, and tissue site detail ID.  By default, the calculation is based on the latest GTEx release.

        :param dynamic_eqtl_body: (required)
        :type dynamic_eqtl_body: List[DynamicEqtlBody]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bulk_calculate_expression_quantitative_trait_loci_api_v2_association_dyneqtl_post_serialize(
            dynamic_eqtl_body=dynamic_eqtl_body,
            dataset_id=dataset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostDynamicEqtlResult",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _bulk_calculate_expression_quantitative_trait_loci_api_v2_association_dyneqtl_post_serialize(
        self,
        dynamic_eqtl_body,
        dataset_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'DynamicEqtlBody': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if dynamic_eqtl_body is not None:
            _body_params = dynamic_eqtl_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/association/dyneqtl',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def calculate_expression_quantitative_trait_loci_api_v2_association_dyneqtl_get(
        self,
        tissue_site_detail_id: Annotated[Any, Field(description="The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID")],
        gencode_id: Annotated[StrictStr, Field(description="A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9")],
        variant_id: Annotated[StrictStr, Field(description="A gtex variant ID")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Eqtl:
        """Calculate Expression Quantitative Trait Loci

        Calculate your own eQTLs  - This service calculates the gene-variant association for any given pair of gene and variant, which may or may not be significant. - This requires as input a GENCODE ID, GTEx variant ID, and tissue site detail ID.  By default, the calculation is based on the latest GTEx release.

        :param tissue_site_detail_id: The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID (required)
        :type tissue_site_detail_id: Tissuesitedetailid
        :param gencode_id: A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9 (required)
        :type gencode_id: str
        :param variant_id: A gtex variant ID (required)
        :type variant_id: str
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calculate_expression_quantitative_trait_loci_api_v2_association_dyneqtl_get_serialize(
            tissue_site_detail_id=tissue_site_detail_id,
            gencode_id=gencode_id,
            variant_id=variant_id,
            dataset_id=dataset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Eqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def calculate_expression_quantitative_trait_loci_api_v2_association_dyneqtl_get_with_http_info(
        self,
        tissue_site_detail_id: Annotated[Any, Field(description="The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID")],
        gencode_id: Annotated[StrictStr, Field(description="A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9")],
        variant_id: Annotated[StrictStr, Field(description="A gtex variant ID")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Eqtl]:
        """Calculate Expression Quantitative Trait Loci

        Calculate your own eQTLs  - This service calculates the gene-variant association for any given pair of gene and variant, which may or may not be significant. - This requires as input a GENCODE ID, GTEx variant ID, and tissue site detail ID.  By default, the calculation is based on the latest GTEx release.

        :param tissue_site_detail_id: The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID (required)
        :type tissue_site_detail_id: Tissuesitedetailid
        :param gencode_id: A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9 (required)
        :type gencode_id: str
        :param variant_id: A gtex variant ID (required)
        :type variant_id: str
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calculate_expression_quantitative_trait_loci_api_v2_association_dyneqtl_get_serialize(
            tissue_site_detail_id=tissue_site_detail_id,
            gencode_id=gencode_id,
            variant_id=variant_id,
            dataset_id=dataset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Eqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def calculate_expression_quantitative_trait_loci_api_v2_association_dyneqtl_get_without_preload_content(
        self,
        tissue_site_detail_id: Annotated[Any, Field(description="The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID")],
        gencode_id: Annotated[StrictStr, Field(description="A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9")],
        variant_id: Annotated[StrictStr, Field(description="A gtex variant ID")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Calculate Expression Quantitative Trait Loci

        Calculate your own eQTLs  - This service calculates the gene-variant association for any given pair of gene and variant, which may or may not be significant. - This requires as input a GENCODE ID, GTEx variant ID, and tissue site detail ID.  By default, the calculation is based on the latest GTEx release.

        :param tissue_site_detail_id: The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID (required)
        :type tissue_site_detail_id: Tissuesitedetailid
        :param gencode_id: A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9 (required)
        :type gencode_id: str
        :param variant_id: A gtex variant ID (required)
        :type variant_id: str
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calculate_expression_quantitative_trait_loci_api_v2_association_dyneqtl_get_serialize(
            tissue_site_detail_id=tissue_site_detail_id,
            gencode_id=gencode_id,
            variant_id=variant_id,
            dataset_id=dataset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Eqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _calculate_expression_quantitative_trait_loci_api_v2_association_dyneqtl_get_serialize(
        self,
        tissue_site_detail_id,
        gencode_id,
        variant_id,
        dataset_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        if gencode_id is not None:
            
            _query_params.append(('gencodeId', gencode_id))
            
        if variant_id is not None:
            
            _query_params.append(('variantId', variant_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/association/dyneqtl',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def calculate_ieqtls_api_v2_association_dynieqtl_get(
        self,
        cell_type: CellType,
        tissue_site_detail_id: Annotated[Any, Field(description="The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID")],
        gencode_id: Annotated[StrictStr, Field(description="A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9")],
        variant_id: Annotated[StrictStr, Field(description="A gtex variant ID")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IEqtl:
        """Calculate Ieqtls

        Calculate your own Cell Specific eQTLs.  - This service calculates the gene-variant association for any given pair of gene and variant, which may or may not be significant. - This requires as input a GENCODE ID, GTEx variant ID, and tissue site detail ID.  By default, the calculation is based on the latest GTEx release.

        :param cell_type: (required)
        :type cell_type: CellType
        :param tissue_site_detail_id: The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID (required)
        :type tissue_site_detail_id: TissueSiteDetailId
        :param gencode_id: A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9 (required)
        :type gencode_id: str
        :param variant_id: A gtex variant ID (required)
        :type variant_id: str
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calculate_ieqtls_api_v2_association_dynieqtl_get_serialize(
            cell_type=cell_type,
            tissue_site_detail_id=tissue_site_detail_id,
            gencode_id=gencode_id,
            variant_id=variant_id,
            dataset_id=dataset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IEqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def calculate_ieqtls_api_v2_association_dynieqtl_get_with_http_info(
        self,
        cell_type: CellType,
        tissue_site_detail_id: Annotated[Any, Field(description="The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID")],
        gencode_id: Annotated[StrictStr, Field(description="A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9")],
        variant_id: Annotated[StrictStr, Field(description="A gtex variant ID")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IEqtl]:
        """Calculate Ieqtls

        Calculate your own Cell Specific eQTLs.  - This service calculates the gene-variant association for any given pair of gene and variant, which may or may not be significant. - This requires as input a GENCODE ID, GTEx variant ID, and tissue site detail ID.  By default, the calculation is based on the latest GTEx release.

        :param cell_type: (required)
        :type cell_type: CellType
        :param tissue_site_detail_id: The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID (required)
        :type tissue_site_detail_id: TissueSiteDetailId
        :param gencode_id: A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9 (required)
        :type gencode_id: str
        :param variant_id: A gtex variant ID (required)
        :type variant_id: str
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calculate_ieqtls_api_v2_association_dynieqtl_get_serialize(
            cell_type=cell_type,
            tissue_site_detail_id=tissue_site_detail_id,
            gencode_id=gencode_id,
            variant_id=variant_id,
            dataset_id=dataset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IEqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def calculate_ieqtls_api_v2_association_dynieqtl_get_without_preload_content(
        self,
        cell_type: CellType,
        tissue_site_detail_id: Annotated[Any, Field(description="The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID")],
        gencode_id: Annotated[StrictStr, Field(description="A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9")],
        variant_id: Annotated[StrictStr, Field(description="A gtex variant ID")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Calculate Ieqtls

        Calculate your own Cell Specific eQTLs.  - This service calculates the gene-variant association for any given pair of gene and variant, which may or may not be significant. - This requires as input a GENCODE ID, GTEx variant ID, and tissue site detail ID.  By default, the calculation is based on the latest GTEx release.

        :param cell_type: (required)
        :type cell_type: CellType
        :param tissue_site_detail_id: The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID (required)
        :type tissue_site_detail_id: TissueSiteDetailId
        :param gencode_id: A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9 (required)
        :type gencode_id: str
        :param variant_id: A gtex variant ID (required)
        :type variant_id: str
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calculate_ieqtls_api_v2_association_dynieqtl_get_serialize(
            cell_type=cell_type,
            tissue_site_detail_id=tissue_site_detail_id,
            gencode_id=gencode_id,
            variant_id=variant_id,
            dataset_id=dataset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IEqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _calculate_ieqtls_api_v2_association_dynieqtl_get_serialize(
        self,
        cell_type,
        tissue_site_detail_id,
        gencode_id,
        variant_id,
        dataset_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if cell_type is not None:
            
            _query_params.append(('cellType', cell_type.value))
            
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id.value))
            
        if gencode_id is not None:
            
            _query_params.append(('gencodeId', gencode_id))
            
        if variant_id is not None:
            
            _query_params.append(('variantId', variant_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/association/dynieqtl',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def calculate_isqtls_api_v2_association_dynisqtl_get(
        self,
        cell_type: CellType,
        tissue_site_detail_id: Annotated[Any, Field(description="The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID")],
        phenotype_id: StrictStr,
        variant_id: Annotated[StrictStr, Field(description="A gtex variant ID")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ISqtl:
        """Calculate Isqtls

        Calculate your own Cell Specific sQTLs.  - This service calculates the gene-variant association for any given pair of gene and variant, which may or may not be significant. - This requires as input a GENCODE ID, GTEx variant ID, and tissue site detail ID.  By default, the calculation is based on the latest GTEx release.

        :param cell_type: (required)
        :type cell_type: CellType
        :param tissue_site_detail_id: The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID (required)
        :type tissue_site_detail_id: Tissuesitedetailid
        :param phenotype_id: (required)
        :type phenotype_id: str
        :param variant_id: A gtex variant ID (required)
        :type variant_id: str
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calculate_isqtls_api_v2_association_dynisqtl_get_serialize(
            cell_type=cell_type,
            tissue_site_detail_id=tissue_site_detail_id,
            phenotype_id=phenotype_id,
            variant_id=variant_id,
            dataset_id=dataset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ISqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def calculate_isqtls_api_v2_association_dynisqtl_get_with_http_info(
        self,
        cell_type: CellType,
        tissue_site_detail_id: Annotated[Any, Field(description="The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID")],
        phenotype_id: StrictStr,
        variant_id: Annotated[StrictStr, Field(description="A gtex variant ID")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ISqtl]:
        """Calculate Isqtls

        Calculate your own Cell Specific sQTLs.  - This service calculates the gene-variant association for any given pair of gene and variant, which may or may not be significant. - This requires as input a GENCODE ID, GTEx variant ID, and tissue site detail ID.  By default, the calculation is based on the latest GTEx release.

        :param cell_type: (required)
        :type cell_type: CellType
        :param tissue_site_detail_id: The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID (required)
        :type tissue_site_detail_id: Tissuesitedetailid
        :param phenotype_id: (required)
        :type phenotype_id: str
        :param variant_id: A gtex variant ID (required)
        :type variant_id: str
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calculate_isqtls_api_v2_association_dynisqtl_get_serialize(
            cell_type=cell_type,
            tissue_site_detail_id=tissue_site_detail_id,
            phenotype_id=phenotype_id,
            variant_id=variant_id,
            dataset_id=dataset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ISqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def calculate_isqtls_api_v2_association_dynisqtl_get_without_preload_content(
        self,
        cell_type: CellType,
        tissue_site_detail_id: Annotated[Any, Field(description="The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID")],
        phenotype_id: StrictStr,
        variant_id: Annotated[StrictStr, Field(description="A gtex variant ID")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Calculate Isqtls

        Calculate your own Cell Specific sQTLs.  - This service calculates the gene-variant association for any given pair of gene and variant, which may or may not be significant. - This requires as input a GENCODE ID, GTEx variant ID, and tissue site detail ID.  By default, the calculation is based on the latest GTEx release.

        :param cell_type: (required)
        :type cell_type: CellType
        :param tissue_site_detail_id: The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID (required)
        :type tissue_site_detail_id: Tissuesitedetailid
        :param phenotype_id: (required)
        :type phenotype_id: str
        :param variant_id: A gtex variant ID (required)
        :type variant_id: str
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calculate_isqtls_api_v2_association_dynisqtl_get_serialize(
            cell_type=cell_type,
            tissue_site_detail_id=tissue_site_detail_id,
            phenotype_id=phenotype_id,
            variant_id=variant_id,
            dataset_id=dataset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ISqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _calculate_isqtls_api_v2_association_dynisqtl_get_serialize(
        self,
        cell_type,
        tissue_site_detail_id,
        phenotype_id,
        variant_id,
        dataset_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if cell_type is not None:
            
            _query_params.append(('cellType', cell_type.value))
            
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        if phenotype_id is not None:
            
            _query_params.append(('phenotypeId', phenotype_id))
            
        if variant_id is not None:
            
            _query_params.append(('variantId', variant_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/association/dynisqtl',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def calculate_splicing_quantitative_trait_loci_api_v2_association_dynsqtl_get(
        self,
        tissue_site_detail_id: Annotated[Any, Field(description="The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID")],
        phenotype_id: StrictStr,
        variant_id: Annotated[StrictStr, Field(description="A gtex variant ID")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Sqtl:
        """Calculate Splicing Quantitative Trait Loci


        :param tissue_site_detail_id: The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID (required)
        :type tissue_site_detail_id: TissueSiteDetailId
        :param phenotype_id: (required)
        :type phenotype_id: str
        :param variant_id: A gtex variant ID (required)
        :type variant_id: str
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calculate_splicing_quantitative_trait_loci_api_v2_association_dynsqtl_get_serialize(
            tissue_site_detail_id=tissue_site_detail_id,
            phenotype_id=phenotype_id,
            variant_id=variant_id,
            dataset_id=dataset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Sqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def calculate_splicing_quantitative_trait_loci_api_v2_association_dynsqtl_get_with_http_info(
        self,
        tissue_site_detail_id: Annotated[Any, Field(description="The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID")],
        phenotype_id: StrictStr,
        variant_id: Annotated[StrictStr, Field(description="A gtex variant ID")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Sqtl]:
        """Calculate Splicing Quantitative Trait Loci


        :param tissue_site_detail_id: The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID (required)
        :type tissue_site_detail_id: TissueSiteDetailId
        :param phenotype_id: (required)
        :type phenotype_id: str
        :param variant_id: A gtex variant ID (required)
        :type variant_id: str
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calculate_splicing_quantitative_trait_loci_api_v2_association_dynsqtl_get_serialize(
            tissue_site_detail_id=tissue_site_detail_id,
            phenotype_id=phenotype_id,
            variant_id=variant_id,
            dataset_id=dataset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Sqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def calculate_splicing_quantitative_trait_loci_api_v2_association_dynsqtl_get_without_preload_content(
        self,
        tissue_site_detail_id: Annotated[Any, Field(description="The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID")],
        phenotype_id: StrictStr,
        variant_id: Annotated[StrictStr, Field(description="A gtex variant ID")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Calculate Splicing Quantitative Trait Loci


        :param tissue_site_detail_id: The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID (required)
        :type tissue_site_detail_id: TissueSiteDetailId
        :param phenotype_id: (required)
        :type phenotype_id: str
        :param variant_id: A gtex variant ID (required)
        :type variant_id: str
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calculate_splicing_quantitative_trait_loci_api_v2_association_dynsqtl_get_serialize(
            tissue_site_detail_id=tissue_site_detail_id,
            phenotype_id=phenotype_id,
            variant_id=variant_id,
            dataset_id=dataset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Sqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _calculate_splicing_quantitative_trait_loci_api_v2_association_dynsqtl_get_serialize(
        self,
        tissue_site_detail_id,
        phenotype_id,
        variant_id,
        dataset_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id.value))
            
        if phenotype_id is not None:
            
            _query_params.append(('phenotypeId', phenotype_id))
            
        if variant_id is not None:
            
            _query_params.append(('variantId', variant_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/association/dynsqtl',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


