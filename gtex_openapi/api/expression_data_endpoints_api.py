# coding: utf-8

"""
    GTEx Portal API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, field_validator
from typing import Any, List, Optional
from typing_extensions import Annotated
from gtex_openapi.models.clustered_median_exon_expression import ClusteredMedianExonExpression
from gtex_openapi.models.clustered_median_gene_expression import ClusteredMedianGeneExpression
from gtex_openapi.models.clustered_median_junction_expression import ClusteredMedianJunctionExpression
from gtex_openapi.models.clustered_median_transcript_expression import ClusteredMedianTranscriptExpression
from gtex_openapi.models.paginated_response_expression_pca import PaginatedResponseExpressionPCA
from gtex_openapi.models.paginated_response_gene_expression import PaginatedResponseGeneExpression
from gtex_openapi.models.paginated_response_median_exon_expression import PaginatedResponseMedianExonExpression
from gtex_openapi.models.paginated_response_median_gene_expression import PaginatedResponseMedianGeneExpression
from gtex_openapi.models.paginated_response_median_junction_expression import PaginatedResponseMedianJunctionExpression
from gtex_openapi.models.paginated_response_median_transcript_expression import PaginatedResponseMedianTranscriptExpression
from gtex_openapi.models.paginated_response_single_nucleus_gene_expression_result import PaginatedResponseSingleNucleusGeneExpressionResult
from gtex_openapi.models.paginated_response_single_nucleus_gene_expression_summary import PaginatedResponseSingleNucleusGeneExpressionSummary
from gtex_openapi.models.paginated_response_top_expressed_genes import PaginatedResponseTopExpressedGenes
from gtex_openapi.models.tissuesitedetailid_inner import TissuesitedetailidInner

from gtex_openapi.api_client import ApiClient, RequestSerialized
from gtex_openapi.api_response import ApiResponse
from gtex_openapi.rest import RESTResponseType


class ExpressionDataEndpointsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_clustered_median_exon_expression_api_v2_expression_clustered_median_exon_expression_get(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ClusteredMedianExonExpression:
        """Get Clustered Median Exon Expression

        Find median transcript expression data along with hierarchical clusters .  - Returns median normalized transcript expression in tissues of all known transcripts of a given gene along with the hierarchical clustering results of tissues and transcripts, based on exon expression, in Newick format. - The hierarchical clustering is performed by calculating Euclidean distances and using the average linkage method. - **This endpoint is not paginated.**  By default, this endpoint queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_clustered_median_exon_expression_api_v2_expression_clustered_median_exon_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusteredMedianExonExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_clustered_median_exon_expression_api_v2_expression_clustered_median_exon_expression_get_with_http_info(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ClusteredMedianExonExpression]:
        """Get Clustered Median Exon Expression

        Find median transcript expression data along with hierarchical clusters .  - Returns median normalized transcript expression in tissues of all known transcripts of a given gene along with the hierarchical clustering results of tissues and transcripts, based on exon expression, in Newick format. - The hierarchical clustering is performed by calculating Euclidean distances and using the average linkage method. - **This endpoint is not paginated.**  By default, this endpoint queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_clustered_median_exon_expression_api_v2_expression_clustered_median_exon_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusteredMedianExonExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_clustered_median_exon_expression_api_v2_expression_clustered_median_exon_expression_get_without_preload_content(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Clustered Median Exon Expression

        Find median transcript expression data along with hierarchical clusters .  - Returns median normalized transcript expression in tissues of all known transcripts of a given gene along with the hierarchical clustering results of tissues and transcripts, based on exon expression, in Newick format. - The hierarchical clustering is performed by calculating Euclidean distances and using the average linkage method. - **This endpoint is not paginated.**  By default, this endpoint queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_clustered_median_exon_expression_api_v2_expression_clustered_median_exon_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusteredMedianExonExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_clustered_median_exon_expression_api_v2_expression_clustered_median_exon_expression_get_serialize(
        self,
        gencode_id,
        dataset_id,
        tissue_site_detail_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'gencodeId': 'multi',
            'tissueSiteDetailId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if gencode_id is not None:
            
            _query_params.append(('gencodeId', gencode_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/expression/clusteredMedianExonExpression',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_clustered_median_gene_expression_api_v2_expression_clustered_median_gene_expression_get(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ClusteredMedianGeneExpression:
        """Get Clustered Median Gene Expression

        Find median gene expression data along with hierarchical clusters .  - Returns median gene expression in tissues along with The hierarchical clustering results of tissues and genes, based on gene expression, in Newick format. - Results may be filtered by dataset, gene or tissue, but at least one gene must be provided - The hierarchical clustering is performed by calculating Euclidean distances and using the average linkage method. - **This endpoint is not paginated.**  By default, this service queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_clustered_median_gene_expression_api_v2_expression_clustered_median_gene_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusteredMedianGeneExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_clustered_median_gene_expression_api_v2_expression_clustered_median_gene_expression_get_with_http_info(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ClusteredMedianGeneExpression]:
        """Get Clustered Median Gene Expression

        Find median gene expression data along with hierarchical clusters .  - Returns median gene expression in tissues along with The hierarchical clustering results of tissues and genes, based on gene expression, in Newick format. - Results may be filtered by dataset, gene or tissue, but at least one gene must be provided - The hierarchical clustering is performed by calculating Euclidean distances and using the average linkage method. - **This endpoint is not paginated.**  By default, this service queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_clustered_median_gene_expression_api_v2_expression_clustered_median_gene_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusteredMedianGeneExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_clustered_median_gene_expression_api_v2_expression_clustered_median_gene_expression_get_without_preload_content(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Clustered Median Gene Expression

        Find median gene expression data along with hierarchical clusters .  - Returns median gene expression in tissues along with The hierarchical clustering results of tissues and genes, based on gene expression, in Newick format. - Results may be filtered by dataset, gene or tissue, but at least one gene must be provided - The hierarchical clustering is performed by calculating Euclidean distances and using the average linkage method. - **This endpoint is not paginated.**  By default, this service queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_clustered_median_gene_expression_api_v2_expression_clustered_median_gene_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusteredMedianGeneExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_clustered_median_gene_expression_api_v2_expression_clustered_median_gene_expression_get_serialize(
        self,
        gencode_id,
        dataset_id,
        tissue_site_detail_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'gencodeId': 'multi',
            'tissueSiteDetailId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if gencode_id is not None:
            
            _query_params.append(('gencodeId', gencode_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/expression/clusteredMedianGeneExpression',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_clustered_median_junction_expression_api_v2_expression_clustered_median_junction_expression_get(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ClusteredMedianJunctionExpression:
        """Get Clustered Median Junction Expression

        Find median junction expression data along with hierarchical clusters .  -  Returns median junction read counts in tissues of a given gene from all known transcripts along with the hierarchical clustering results of tissues and genes, based on junction expression, in Newick format. - Results may be filtered by dataset, gene or tissue, but at least one gene must be provided. - The hierarchical clustering is performed by calculating Euclidean distances and using the average linkage method. - **This endpoint is not paginated.**  By default, this service queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_clustered_median_junction_expression_api_v2_expression_clustered_median_junction_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusteredMedianJunctionExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_clustered_median_junction_expression_api_v2_expression_clustered_median_junction_expression_get_with_http_info(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ClusteredMedianJunctionExpression]:
        """Get Clustered Median Junction Expression

        Find median junction expression data along with hierarchical clusters .  -  Returns median junction read counts in tissues of a given gene from all known transcripts along with the hierarchical clustering results of tissues and genes, based on junction expression, in Newick format. - Results may be filtered by dataset, gene or tissue, but at least one gene must be provided. - The hierarchical clustering is performed by calculating Euclidean distances and using the average linkage method. - **This endpoint is not paginated.**  By default, this service queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_clustered_median_junction_expression_api_v2_expression_clustered_median_junction_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusteredMedianJunctionExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_clustered_median_junction_expression_api_v2_expression_clustered_median_junction_expression_get_without_preload_content(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Clustered Median Junction Expression

        Find median junction expression data along with hierarchical clusters .  -  Returns median junction read counts in tissues of a given gene from all known transcripts along with the hierarchical clustering results of tissues and genes, based on junction expression, in Newick format. - Results may be filtered by dataset, gene or tissue, but at least one gene must be provided. - The hierarchical clustering is performed by calculating Euclidean distances and using the average linkage method. - **This endpoint is not paginated.**  By default, this service queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_clustered_median_junction_expression_api_v2_expression_clustered_median_junction_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusteredMedianJunctionExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_clustered_median_junction_expression_api_v2_expression_clustered_median_junction_expression_get_serialize(
        self,
        gencode_id,
        dataset_id,
        tissue_site_detail_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'gencodeId': 'multi',
            'tissueSiteDetailId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if gencode_id is not None:
            
            _query_params.append(('gencodeId', gencode_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/expression/clusteredMedianJunctionExpression',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_clustered_median_transcript_expression_api_v2_expression_clustered_median_transcript_expression_get(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ClusteredMedianTranscriptExpression:
        """Get Clustered Median Transcript Expression

        Find median transcript expression data of all known transcripts of a gene along with hierarchical clusters .  -   Returns median normalized expression in tissues of all known transcripts of a given gene along with the hierarchical clustering results of tissues and genes, based on expression, in Newick format. - Results may be filtered by dataset, gene or tissue, but at least one gene must be provided. - The hierarchical clustering is performed by calculating Euclidean distances and using the average linkage method. - **This endpoint is not paginated.**  By default, this service queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_clustered_median_transcript_expression_api_v2_expression_clustered_median_transcript_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusteredMedianTranscriptExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_clustered_median_transcript_expression_api_v2_expression_clustered_median_transcript_expression_get_with_http_info(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ClusteredMedianTranscriptExpression]:
        """Get Clustered Median Transcript Expression

        Find median transcript expression data of all known transcripts of a gene along with hierarchical clusters .  -   Returns median normalized expression in tissues of all known transcripts of a given gene along with the hierarchical clustering results of tissues and genes, based on expression, in Newick format. - Results may be filtered by dataset, gene or tissue, but at least one gene must be provided. - The hierarchical clustering is performed by calculating Euclidean distances and using the average linkage method. - **This endpoint is not paginated.**  By default, this service queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_clustered_median_transcript_expression_api_v2_expression_clustered_median_transcript_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusteredMedianTranscriptExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_clustered_median_transcript_expression_api_v2_expression_clustered_median_transcript_expression_get_without_preload_content(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Clustered Median Transcript Expression

        Find median transcript expression data of all known transcripts of a gene along with hierarchical clusters .  -   Returns median normalized expression in tissues of all known transcripts of a given gene along with the hierarchical clustering results of tissues and genes, based on expression, in Newick format. - Results may be filtered by dataset, gene or tissue, but at least one gene must be provided. - The hierarchical clustering is performed by calculating Euclidean distances and using the average linkage method. - **This endpoint is not paginated.**  By default, this service queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_clustered_median_transcript_expression_api_v2_expression_clustered_median_transcript_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ClusteredMedianTranscriptExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_clustered_median_transcript_expression_api_v2_expression_clustered_median_transcript_expression_get_serialize(
        self,
        gencode_id,
        dataset_id,
        tissue_site_detail_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'gencodeId': 'multi',
            'tissueSiteDetailId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if gencode_id is not None:
            
            _query_params.append(('gencodeId', gencode_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/expression/clusteredMedianTranscriptExpression',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_expression_pca_api_v2_expression_expression_pca_get(
        self,
        tissue_site_detail_id: Annotated[List[TissuesitedetailidInner], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        sample_id: Optional[Annotated[str, Field(strict=True)]] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseExpressionPCA:
        """Get Expression Pca

        Find gene expression PCA data.  - Returns gene expression PCA (principal component analysis) in tissues. - Results may be filtered by tissue, sample, or dataset.  By default, the service queries the latest GTEx release.

        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID (required)
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param sample_id:
        :type sample_id: str
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_expression_pca_api_v2_expression_expression_pca_get_serialize(
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            sample_id=sample_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseExpressionPCA",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_expression_pca_api_v2_expression_expression_pca_get_with_http_info(
        self,
        tissue_site_detail_id: Annotated[List[TissuesitedetailidInner], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        sample_id: Optional[Annotated[str, Field(strict=True)]] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseExpressionPCA]:
        """Get Expression Pca

        Find gene expression PCA data.  - Returns gene expression PCA (principal component analysis) in tissues. - Results may be filtered by tissue, sample, or dataset.  By default, the service queries the latest GTEx release.

        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID (required)
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param sample_id:
        :type sample_id: str
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_expression_pca_api_v2_expression_expression_pca_get_serialize(
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            sample_id=sample_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseExpressionPCA",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_expression_pca_api_v2_expression_expression_pca_get_without_preload_content(
        self,
        tissue_site_detail_id: Annotated[List[TissuesitedetailidInner], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        sample_id: Optional[Annotated[str, Field(strict=True)]] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Expression Pca

        Find gene expression PCA data.  - Returns gene expression PCA (principal component analysis) in tissues. - Results may be filtered by tissue, sample, or dataset.  By default, the service queries the latest GTEx release.

        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID (required)
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param sample_id:
        :type sample_id: str
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_expression_pca_api_v2_expression_expression_pca_get_serialize(
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            sample_id=sample_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseExpressionPCA",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_expression_pca_api_v2_expression_expression_pca_get_serialize(
        self,
        tissue_site_detail_id,
        dataset_id,
        sample_id,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'tissueSiteDetailId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        if sample_id is not None:
            
            _query_params.append(('sampleId', sample_id))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/expression/expressionPca',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_gene_expression_api_v2_expression_gene_expression_get(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        attribute_subset: Annotated[Optional[Any], Field(description="Donor attribute to subset data by")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseGeneExpression:
        """Get Gene Expression

        Find normalized gene expression data.  - Returns normalized gene expression in tissues at the sample level. - Results may be filtered by dataset, gene or tissue, but at least one gene must be provided.  By default, this service queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param attribute_subset: Donor attribute to subset data by
        :type attribute_subset: DonorAttribute
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_gene_expression_api_v2_expression_gene_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            attribute_subset=attribute_subset,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseGeneExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_gene_expression_api_v2_expression_gene_expression_get_with_http_info(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        attribute_subset: Annotated[Optional[Any], Field(description="Donor attribute to subset data by")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseGeneExpression]:
        """Get Gene Expression

        Find normalized gene expression data.  - Returns normalized gene expression in tissues at the sample level. - Results may be filtered by dataset, gene or tissue, but at least one gene must be provided.  By default, this service queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param attribute_subset: Donor attribute to subset data by
        :type attribute_subset: DonorAttribute
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_gene_expression_api_v2_expression_gene_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            attribute_subset=attribute_subset,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseGeneExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_gene_expression_api_v2_expression_gene_expression_get_without_preload_content(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        attribute_subset: Annotated[Optional[Any], Field(description="Donor attribute to subset data by")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Gene Expression

        Find normalized gene expression data.  - Returns normalized gene expression in tissues at the sample level. - Results may be filtered by dataset, gene or tissue, but at least one gene must be provided.  By default, this service queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param attribute_subset: Donor attribute to subset data by
        :type attribute_subset: DonorAttribute
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_gene_expression_api_v2_expression_gene_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            attribute_subset=attribute_subset,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseGeneExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_gene_expression_api_v2_expression_gene_expression_get_serialize(
        self,
        gencode_id,
        dataset_id,
        tissue_site_detail_id,
        attribute_subset,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'gencodeId': 'multi',
            'tissueSiteDetailId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if gencode_id is not None:
            
            _query_params.append(('gencodeId', gencode_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        if attribute_subset is not None:
            
            _query_params.append(('attributeSubset', attribute_subset.value))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/expression/geneExpression',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_median_exon_expression_api_v2_expression_median_exon_expression_get(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseMedianExonExpression:
        """Get Median Exon Expression

        Find median exon expression data.  - Returns median exon read counts, in tissues, of a collapsed gene model. - Results may be filtered by dataset, gene or tissue, but at least one gene must be provided  By default, this service queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_median_exon_expression_api_v2_expression_median_exon_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseMedianExonExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_median_exon_expression_api_v2_expression_median_exon_expression_get_with_http_info(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseMedianExonExpression]:
        """Get Median Exon Expression

        Find median exon expression data.  - Returns median exon read counts, in tissues, of a collapsed gene model. - Results may be filtered by dataset, gene or tissue, but at least one gene must be provided  By default, this service queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_median_exon_expression_api_v2_expression_median_exon_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseMedianExonExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_median_exon_expression_api_v2_expression_median_exon_expression_get_without_preload_content(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Median Exon Expression

        Find median exon expression data.  - Returns median exon read counts, in tissues, of a collapsed gene model. - Results may be filtered by dataset, gene or tissue, but at least one gene must be provided  By default, this service queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_median_exon_expression_api_v2_expression_median_exon_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseMedianExonExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_median_exon_expression_api_v2_expression_median_exon_expression_get_serialize(
        self,
        gencode_id,
        dataset_id,
        tissue_site_detail_id,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'gencodeId': 'multi',
            'tissueSiteDetailId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if gencode_id is not None:
            
            _query_params.append(('gencodeId', gencode_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/expression/medianExonExpression',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_median_gene_expression_api_v2_expression_median_gene_expression_get(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseMedianGeneExpression:
        """Get Median Gene Expression

        Find median gene expression data along with hierarchical clusters .  - Returns median gene  expression in tissues.  By default, this endpoint queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_median_gene_expression_api_v2_expression_median_gene_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseMedianGeneExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_median_gene_expression_api_v2_expression_median_gene_expression_get_with_http_info(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseMedianGeneExpression]:
        """Get Median Gene Expression

        Find median gene expression data along with hierarchical clusters .  - Returns median gene  expression in tissues.  By default, this endpoint queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_median_gene_expression_api_v2_expression_median_gene_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseMedianGeneExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_median_gene_expression_api_v2_expression_median_gene_expression_get_without_preload_content(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Median Gene Expression

        Find median gene expression data along with hierarchical clusters .  - Returns median gene  expression in tissues.  By default, this endpoint queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_median_gene_expression_api_v2_expression_median_gene_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseMedianGeneExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_median_gene_expression_api_v2_expression_median_gene_expression_get_serialize(
        self,
        gencode_id,
        dataset_id,
        tissue_site_detail_id,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'gencodeId': 'multi',
            'tissueSiteDetailId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if gencode_id is not None:
            
            _query_params.append(('gencodeId', gencode_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/expression/medianGeneExpression',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_median_junction_expression_api_v2_expression_median_junction_expression_get(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseMedianJunctionExpression:
        """Get Median Junction Expression

        Find junction gene expression data.  - Returns median junction read counts in tissues of a given gene from all known transcripts. - Results may be filtered by dataset or tissue.  By default, this service queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_median_junction_expression_api_v2_expression_median_junction_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseMedianJunctionExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_median_junction_expression_api_v2_expression_median_junction_expression_get_with_http_info(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseMedianJunctionExpression]:
        """Get Median Junction Expression

        Find junction gene expression data.  - Returns median junction read counts in tissues of a given gene from all known transcripts. - Results may be filtered by dataset or tissue.  By default, this service queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_median_junction_expression_api_v2_expression_median_junction_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseMedianJunctionExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_median_junction_expression_api_v2_expression_median_junction_expression_get_without_preload_content(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Median Junction Expression

        Find junction gene expression data.  - Returns median junction read counts in tissues of a given gene from all known transcripts. - Results may be filtered by dataset or tissue.  By default, this service queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_median_junction_expression_api_v2_expression_median_junction_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseMedianJunctionExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_median_junction_expression_api_v2_expression_median_junction_expression_get_serialize(
        self,
        gencode_id,
        dataset_id,
        tissue_site_detail_id,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'gencodeId': 'multi',
            'tissueSiteDetailId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if gencode_id is not None:
            
            _query_params.append(('gencodeId', gencode_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/expression/medianJunctionExpression',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_median_transcript_expression_api_v2_expression_median_transcript_expression_get(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseMedianTranscriptExpression:
        """Get Median Transcript Expression

        Find median transcript expression data of all known transcripts of a gene.  - Returns median normalized expression in tissues of all known transcripts of a given gene. - Results may be filtered by dataset or tissue.   By default, this service queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_median_transcript_expression_api_v2_expression_median_transcript_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseMedianTranscriptExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_median_transcript_expression_api_v2_expression_median_transcript_expression_get_with_http_info(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseMedianTranscriptExpression]:
        """Get Median Transcript Expression

        Find median transcript expression data of all known transcripts of a gene.  - Returns median normalized expression in tissues of all known transcripts of a given gene. - Results may be filtered by dataset or tissue.   By default, this service queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_median_transcript_expression_api_v2_expression_median_transcript_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseMedianTranscriptExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_median_transcript_expression_api_v2_expression_median_transcript_expression_get_without_preload_content(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Median Transcript Expression

        Find median transcript expression data of all known transcripts of a gene.  - Returns median normalized expression in tissues of all known transcripts of a given gene. - Results may be filtered by dataset or tissue.   By default, this service queries the latest GTEx release.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_median_transcript_expression_api_v2_expression_median_transcript_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseMedianTranscriptExpression",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_median_transcript_expression_api_v2_expression_median_transcript_expression_get_serialize(
        self,
        gencode_id,
        dataset_id,
        tissue_site_detail_id,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'gencodeId': 'multi',
            'tissueSiteDetailId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if gencode_id is not None:
            
            _query_params.append(('gencodeId', gencode_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/expression/medianTranscriptExpression',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_single_nucleus_gex_api_v2_expression_single_nucleus_gene_expression_get(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Optional[Any] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        exclude_data_array: Annotated[Optional[StrictBool], Field(description="Include Expression Values in Result. Set to `false` to include the data array")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseSingleNucleusGeneExpressionResult:
        """Get Single Nucleus Gex

        Retrieve Single Nucleus Gene Expression Data for a given Gene.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id:
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param exclude_data_array: Include Expression Values in Result. Set to `false` to include the data array
        :type exclude_data_array: bool
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_nucleus_gex_api_v2_expression_single_nucleus_gene_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            exclude_data_array=exclude_data_array,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSingleNucleusGeneExpressionResult",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_single_nucleus_gex_api_v2_expression_single_nucleus_gene_expression_get_with_http_info(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Optional[Any] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        exclude_data_array: Annotated[Optional[StrictBool], Field(description="Include Expression Values in Result. Set to `false` to include the data array")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseSingleNucleusGeneExpressionResult]:
        """Get Single Nucleus Gex

        Retrieve Single Nucleus Gene Expression Data for a given Gene.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id:
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param exclude_data_array: Include Expression Values in Result. Set to `false` to include the data array
        :type exclude_data_array: bool
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_nucleus_gex_api_v2_expression_single_nucleus_gene_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            exclude_data_array=exclude_data_array,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSingleNucleusGeneExpressionResult",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_single_nucleus_gex_api_v2_expression_single_nucleus_gene_expression_get_without_preload_content(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Optional[Any] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        exclude_data_array: Annotated[Optional[StrictBool], Field(description="Include Expression Values in Result. Set to `false` to include the data array")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Single Nucleus Gex

        Retrieve Single Nucleus Gene Expression Data for a given Gene.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id:
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param exclude_data_array: Include Expression Values in Result. Set to `false` to include the data array
        :type exclude_data_array: bool
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_nucleus_gex_api_v2_expression_single_nucleus_gene_expression_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            exclude_data_array=exclude_data_array,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSingleNucleusGeneExpressionResult",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_single_nucleus_gex_api_v2_expression_single_nucleus_gene_expression_get_serialize(
        self,
        gencode_id,
        dataset_id,
        tissue_site_detail_id,
        exclude_data_array,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'gencodeId': 'multi',
            'tissueSiteDetailId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if gencode_id is not None:
            
            _query_params.append(('gencodeId', gencode_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        if exclude_data_array is not None:
            
            _query_params.append(('excludeDataArray', exclude_data_array))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/expression/singleNucleusGeneExpression',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_single_nucleus_gex_summary_api_v2_expression_single_nucleus_gene_expression_summary_get(
        self,
        dataset_id: Optional[Any] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseSingleNucleusGeneExpressionSummary:
        """Get Single Nucleus Gex Summary

        Retrieve Summarized Single Nucleus Gene Expression Data.

        :param dataset_id:
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_nucleus_gex_summary_api_v2_expression_single_nucleus_gene_expression_summary_get_serialize(
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSingleNucleusGeneExpressionSummary",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_single_nucleus_gex_summary_api_v2_expression_single_nucleus_gene_expression_summary_get_with_http_info(
        self,
        dataset_id: Optional[Any] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseSingleNucleusGeneExpressionSummary]:
        """Get Single Nucleus Gex Summary

        Retrieve Summarized Single Nucleus Gene Expression Data.

        :param dataset_id:
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_nucleus_gex_summary_api_v2_expression_single_nucleus_gene_expression_summary_get_serialize(
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSingleNucleusGeneExpressionSummary",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_single_nucleus_gex_summary_api_v2_expression_single_nucleus_gene_expression_summary_get_without_preload_content(
        self,
        dataset_id: Optional[Any] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Single Nucleus Gex Summary

        Retrieve Summarized Single Nucleus Gene Expression Data.

        :param dataset_id:
        :type dataset_id: DatasetId
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_single_nucleus_gex_summary_api_v2_expression_single_nucleus_gene_expression_summary_get_serialize(
            dataset_id=dataset_id,
            tissue_site_detail_id=tissue_site_detail_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSingleNucleusGeneExpressionSummary",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_single_nucleus_gex_summary_api_v2_expression_single_nucleus_gene_expression_summary_get_serialize(
        self,
        dataset_id,
        tissue_site_detail_id,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'tissueSiteDetailId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/expression/singleNucleusGeneExpressionSummary',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_top_expressed_genes_api_v2_expression_top_expressed_gene_get(
        self,
        tissue_site_detail_id: Annotated[Any, Field(description="The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        filter_mt_gene: Annotated[Optional[StrictBool], Field(description="exclude mt genes")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseTopExpressedGenes:
        """Get Top Expressed Genes

        Find top expressed genes for a specified tissue.  - Returns top expressed genes for a specified tissue in a dataset, sorted by median expression. - When the optional parameter `filterMtGene` is set to true, mitochondrial genes will be excluded from the results.  By default, this service queries the latest GTEx release.

        :param tissue_site_detail_id: The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID (required)
        :type tissue_site_detail_id: Tissuesitedetailid
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param filter_mt_gene: exclude mt genes
        :type filter_mt_gene: bool
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_top_expressed_genes_api_v2_expression_top_expressed_gene_get_serialize(
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            filter_mt_gene=filter_mt_gene,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseTopExpressedGenes",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_top_expressed_genes_api_v2_expression_top_expressed_gene_get_with_http_info(
        self,
        tissue_site_detail_id: Annotated[Any, Field(description="The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        filter_mt_gene: Annotated[Optional[StrictBool], Field(description="exclude mt genes")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseTopExpressedGenes]:
        """Get Top Expressed Genes

        Find top expressed genes for a specified tissue.  - Returns top expressed genes for a specified tissue in a dataset, sorted by median expression. - When the optional parameter `filterMtGene` is set to true, mitochondrial genes will be excluded from the results.  By default, this service queries the latest GTEx release.

        :param tissue_site_detail_id: The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID (required)
        :type tissue_site_detail_id: Tissuesitedetailid
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param filter_mt_gene: exclude mt genes
        :type filter_mt_gene: bool
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_top_expressed_genes_api_v2_expression_top_expressed_gene_get_serialize(
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            filter_mt_gene=filter_mt_gene,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseTopExpressedGenes",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_top_expressed_genes_api_v2_expression_top_expressed_gene_get_without_preload_content(
        self,
        tissue_site_detail_id: Annotated[Any, Field(description="The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        filter_mt_gene: Annotated[Optional[StrictBool], Field(description="exclude mt genes")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Top Expressed Genes

        Find top expressed genes for a specified tissue.  - Returns top expressed genes for a specified tissue in a dataset, sorted by median expression. - When the optional parameter `filterMtGene` is set to true, mitochondrial genes will be excluded from the results.  By default, this service queries the latest GTEx release.

        :param tissue_site_detail_id: The ID of the tissue of interest. Can be a GTEx specific ID or an Ontology ID (required)
        :type tissue_site_detail_id: Tissuesitedetailid
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param filter_mt_gene: exclude mt genes
        :type filter_mt_gene: bool
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_top_expressed_genes_api_v2_expression_top_expressed_gene_get_serialize(
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            filter_mt_gene=filter_mt_gene,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseTopExpressedGenes",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_top_expressed_genes_api_v2_expression_top_expressed_gene_get_serialize(
        self,
        tissue_site_detail_id,
        dataset_id,
        filter_mt_gene,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        if filter_mt_gene is not None:
            
            _query_params.append(('filterMtGene', filter_mt_gene))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/expression/topExpressedGene',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


