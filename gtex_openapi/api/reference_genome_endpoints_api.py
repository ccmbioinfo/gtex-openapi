# coding: utf-8

"""
    GTEx Portal API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Any, List, Optional
from typing_extensions import Annotated
from gtex_openapi.models.app_models_request_parameters_genome_build import AppModelsRequestParametersGenomeBuild
from gtex_openapi.models.chromosome import Chromosome
from gtex_openapi.models.dataset_id import DatasetId
from gtex_openapi.models.feature import Feature
from gtex_openapi.models.paginated_response_exon import PaginatedResponseExon
from gtex_openapi.models.paginated_response_gwas import PaginatedResponseGWAS
from gtex_openapi.models.paginated_response_gene import PaginatedResponseGene
from gtex_openapi.models.paginated_response_transcript import PaginatedResponseTranscript

from gtex_openapi.api_client import ApiClient, RequestSerialized
from gtex_openapi.api_response import ApiResponse
from gtex_openapi.rest import RESTResponseType


class ReferenceGenomeEndpointsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_exons_api_v2_reference_exon_get(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        gencode_version: Annotated[Optional[Any], Field(description="GENCODE annotation release.")] = None,
        genome_build: Optional[AppModelsRequestParametersGenomeBuild] = None,
        dataset_id: Optional[DatasetId] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseExon:
        """Get Exons

        This service returns exons from all known transcripts of the given gene.  - A versioned GENCODE ID is required to ensure that all exons are from a single gene.  - A dataset ID or both GENCODE version and genome build must be provided.  - Although annotated exons are not dataset dependent, specifying a dataset here is equivalent to specifying the GENCODE version and genome build used by that dataset.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param gencode_version: GENCODE annotation release.
        :type gencode_version: AppModelsRequestParametersGencodeVersion
        :param genome_build:
        :type genome_build: AppModelsRequestParametersGenomeBuild
        :param dataset_id:
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_exons_api_v2_reference_exon_get_serialize(
            gencode_id=gencode_id,
            gencode_version=gencode_version,
            genome_build=genome_build,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseExon",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_exons_api_v2_reference_exon_get_with_http_info(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        gencode_version: Annotated[Optional[Any], Field(description="GENCODE annotation release.")] = None,
        genome_build: Optional[AppModelsRequestParametersGenomeBuild] = None,
        dataset_id: Optional[DatasetId] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseExon]:
        """Get Exons

        This service returns exons from all known transcripts of the given gene.  - A versioned GENCODE ID is required to ensure that all exons are from a single gene.  - A dataset ID or both GENCODE version and genome build must be provided.  - Although annotated exons are not dataset dependent, specifying a dataset here is equivalent to specifying the GENCODE version and genome build used by that dataset.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param gencode_version: GENCODE annotation release.
        :type gencode_version: AppModelsRequestParametersGencodeVersion
        :param genome_build:
        :type genome_build: AppModelsRequestParametersGenomeBuild
        :param dataset_id:
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_exons_api_v2_reference_exon_get_serialize(
            gencode_id=gencode_id,
            gencode_version=gencode_version,
            genome_build=genome_build,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseExon",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_exons_api_v2_reference_exon_get_without_preload_content(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        gencode_version: Annotated[Optional[Any], Field(description="GENCODE annotation release.")] = None,
        genome_build: Optional[AppModelsRequestParametersGenomeBuild] = None,
        dataset_id: Optional[DatasetId] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Exons

        This service returns exons from all known transcripts of the given gene.  - A versioned GENCODE ID is required to ensure that all exons are from a single gene.  - A dataset ID or both GENCODE version and genome build must be provided.  - Although annotated exons are not dataset dependent, specifying a dataset here is equivalent to specifying the GENCODE version and genome build used by that dataset.

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param gencode_version: GENCODE annotation release.
        :type gencode_version: AppModelsRequestParametersGencodeVersion
        :param genome_build:
        :type genome_build: AppModelsRequestParametersGenomeBuild
        :param dataset_id:
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_exons_api_v2_reference_exon_get_serialize(
            gencode_id=gencode_id,
            gencode_version=gencode_version,
            genome_build=genome_build,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseExon",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_exons_api_v2_reference_exon_get_serialize(
        self,
        gencode_id,
        gencode_version,
        genome_build,
        dataset_id,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'gencodeId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if gencode_id is not None:
            
            _query_params.append(('gencodeId', gencode_id))
            
        if gencode_version is not None:
            
            _query_params.append(('gencodeVersion', gencode_version.value))
            
        if genome_build is not None:
            
            _query_params.append(('genomeBuild', genome_build.value))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/reference/exon',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_gene_search_api_v2_reference_gene_search_get(
        self,
        gene_id: Annotated[str, Field(min_length=1, strict=True)],
        gencode_version: Annotated[Optional[Any], Field(description="GENCODE annotation release.")] = None,
        genome_build: Optional[Any] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseGene:
        """Get Gene Search

        Find genes that are partial or complete match of a gene_id  - gene_id could be a gene symbol, a gencode ID, or an Ensemble ID  - Gencode Version and Genome Build must be specified

        :param gene_id: (required)
        :type gene_id: str
        :param gencode_version: GENCODE annotation release.
        :type gencode_version: AppModelsRequestParametersGencodeVersion
        :param genome_build:
        :type genome_build: AppModelsRequestParametersGenomeBuild
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_gene_search_api_v2_reference_gene_search_get_serialize(
            gene_id=gene_id,
            gencode_version=gencode_version,
            genome_build=genome_build,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseGene",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_gene_search_api_v2_reference_gene_search_get_with_http_info(
        self,
        gene_id: Annotated[str, Field(min_length=1, strict=True)],
        gencode_version: Annotated[Optional[Any], Field(description="GENCODE annotation release.")] = None,
        genome_build: Optional[Any] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseGene]:
        """Get Gene Search

        Find genes that are partial or complete match of a gene_id  - gene_id could be a gene symbol, a gencode ID, or an Ensemble ID  - Gencode Version and Genome Build must be specified

        :param gene_id: (required)
        :type gene_id: str
        :param gencode_version: GENCODE annotation release.
        :type gencode_version: AppModelsRequestParametersGencodeVersion
        :param genome_build:
        :type genome_build: AppModelsRequestParametersGenomeBuild
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_gene_search_api_v2_reference_gene_search_get_serialize(
            gene_id=gene_id,
            gencode_version=gencode_version,
            genome_build=genome_build,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseGene",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_gene_search_api_v2_reference_gene_search_get_without_preload_content(
        self,
        gene_id: Annotated[str, Field(min_length=1, strict=True)],
        gencode_version: Annotated[Optional[Any], Field(description="GENCODE annotation release.")] = None,
        genome_build: Optional[Any] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Gene Search

        Find genes that are partial or complete match of a gene_id  - gene_id could be a gene symbol, a gencode ID, or an Ensemble ID  - Gencode Version and Genome Build must be specified

        :param gene_id: (required)
        :type gene_id: str
        :param gencode_version: GENCODE annotation release.
        :type gencode_version: AppModelsRequestParametersGencodeVersion
        :param genome_build:
        :type genome_build: AppModelsRequestParametersGenomeBuild
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_gene_search_api_v2_reference_gene_search_get_serialize(
            gene_id=gene_id,
            gencode_version=gencode_version,
            genome_build=genome_build,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseGene",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_gene_search_api_v2_reference_gene_search_get_serialize(
        self,
        gene_id,
        gencode_version,
        genome_build,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if gene_id is not None:
            
            _query_params.append(('geneId', gene_id))
            
        if gencode_version is not None:
            
            _query_params.append(('gencodeVersion', gencode_version.value))
            
        if genome_build is not None:
            
            _query_params.append(('genomeBuild', genome_build.value))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/reference/geneSearch',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_genes_api_v2_reference_gene_get(
        self,
        gene_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True)]], Field(description="A gene symbol, versioned gencodeId, or unversioned gencodeId.")],
        gencode_version: Annotated[Optional[Any], Field(description="GENCODE annotation release.")] = None,
        genome_build: Optional[Any] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseGene:
        """Get Genes

        This service returns information about reference genes. A genome build and GENCODE version must be provided.  - Genes are searchable by gene symbol, GENCODE ID and versioned GENCODE ID.  - Versioned GENCODE ID is recommended to ensure unique ID matching.  - By default, this service queries the genome build and GENCODE version used by the latest GTEx release.

        :param gene_id: A gene symbol, versioned gencodeId, or unversioned gencodeId. (required)
        :type gene_id: List[str]
        :param gencode_version: GENCODE annotation release.
        :type gencode_version: AppModelsRequestParametersGencodeVersion
        :param genome_build:
        :type genome_build: AppModelsRequestParametersGenomeBuild
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_genes_api_v2_reference_gene_get_serialize(
            gene_id=gene_id,
            gencode_version=gencode_version,
            genome_build=genome_build,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseGene",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_genes_api_v2_reference_gene_get_with_http_info(
        self,
        gene_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True)]], Field(description="A gene symbol, versioned gencodeId, or unversioned gencodeId.")],
        gencode_version: Annotated[Optional[Any], Field(description="GENCODE annotation release.")] = None,
        genome_build: Optional[Any] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseGene]:
        """Get Genes

        This service returns information about reference genes. A genome build and GENCODE version must be provided.  - Genes are searchable by gene symbol, GENCODE ID and versioned GENCODE ID.  - Versioned GENCODE ID is recommended to ensure unique ID matching.  - By default, this service queries the genome build and GENCODE version used by the latest GTEx release.

        :param gene_id: A gene symbol, versioned gencodeId, or unversioned gencodeId. (required)
        :type gene_id: List[str]
        :param gencode_version: GENCODE annotation release.
        :type gencode_version: AppModelsRequestParametersGencodeVersion
        :param genome_build:
        :type genome_build: AppModelsRequestParametersGenomeBuild
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_genes_api_v2_reference_gene_get_serialize(
            gene_id=gene_id,
            gencode_version=gencode_version,
            genome_build=genome_build,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseGene",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_genes_api_v2_reference_gene_get_without_preload_content(
        self,
        gene_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True)]], Field(description="A gene symbol, versioned gencodeId, or unversioned gencodeId.")],
        gencode_version: Annotated[Optional[Any], Field(description="GENCODE annotation release.")] = None,
        genome_build: Optional[Any] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Genes

        This service returns information about reference genes. A genome build and GENCODE version must be provided.  - Genes are searchable by gene symbol, GENCODE ID and versioned GENCODE ID.  - Versioned GENCODE ID is recommended to ensure unique ID matching.  - By default, this service queries the genome build and GENCODE version used by the latest GTEx release.

        :param gene_id: A gene symbol, versioned gencodeId, or unversioned gencodeId. (required)
        :type gene_id: List[str]
        :param gencode_version: GENCODE annotation release.
        :type gencode_version: AppModelsRequestParametersGencodeVersion
        :param genome_build:
        :type genome_build: AppModelsRequestParametersGenomeBuild
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_genes_api_v2_reference_gene_get_serialize(
            gene_id=gene_id,
            gencode_version=gencode_version,
            genome_build=genome_build,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseGene",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_genes_api_v2_reference_gene_get_serialize(
        self,
        gene_id,
        gencode_version,
        genome_build,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'geneId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if gene_id is not None:
            
            _query_params.append(('geneId', gene_id))
            
        if gencode_version is not None:
            
            _query_params.append(('gencodeVersion', gencode_version.value))
            
        if genome_build is not None:
            
            _query_params.append(('genomeBuild', genome_build.value))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/reference/gene',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_genomic_features_api_v2_reference_features_feature_id_get(
        self,
        feature_id: StrictStr,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Feature:
        """Get Genomic Features


        :param feature_id: (required)
        :type feature_id: str
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_genomic_features_api_v2_reference_features_feature_id_get_serialize(
            feature_id=feature_id,
            dataset_id=dataset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Feature",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_genomic_features_api_v2_reference_features_feature_id_get_with_http_info(
        self,
        feature_id: StrictStr,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Feature]:
        """Get Genomic Features


        :param feature_id: (required)
        :type feature_id: str
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_genomic_features_api_v2_reference_features_feature_id_get_serialize(
            feature_id=feature_id,
            dataset_id=dataset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Feature",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_genomic_features_api_v2_reference_features_feature_id_get_without_preload_content(
        self,
        feature_id: StrictStr,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Genomic Features


        :param feature_id: (required)
        :type feature_id: str
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_genomic_features_api_v2_reference_features_feature_id_get_serialize(
            feature_id=feature_id,
            dataset_id=dataset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Feature",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_genomic_features_api_v2_reference_features_feature_id_get_serialize(
        self,
        feature_id,
        dataset_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if feature_id is not None:
            _path_params['featureId'] = feature_id
        # process the query parameters
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/reference/features/{featureId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_gwas_catalog_by_location_api_v2_reference_gwas_catalog_by_location_get(
        self,
        start: Annotated[int, Field(le=250000000, strict=True, ge=0)],
        end: Annotated[int, Field(le=250000000, strict=True, ge=0)],
        chromosome: Chromosome,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseGWAS:
        """Get Gwas Catalog By Location

        Find the GWAS Catalog on a certain chromosome between start and end locations.

        :param start: (required)
        :type start: int
        :param end: (required)
        :type end: int
        :param chromosome: (required)
        :type chromosome: Chromosome
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_gwas_catalog_by_location_api_v2_reference_gwas_catalog_by_location_get_serialize(
            start=start,
            end=end,
            chromosome=chromosome,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseGWAS",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_gwas_catalog_by_location_api_v2_reference_gwas_catalog_by_location_get_with_http_info(
        self,
        start: Annotated[int, Field(le=250000000, strict=True, ge=0)],
        end: Annotated[int, Field(le=250000000, strict=True, ge=0)],
        chromosome: Chromosome,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseGWAS]:
        """Get Gwas Catalog By Location

        Find the GWAS Catalog on a certain chromosome between start and end locations.

        :param start: (required)
        :type start: int
        :param end: (required)
        :type end: int
        :param chromosome: (required)
        :type chromosome: Chromosome
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_gwas_catalog_by_location_api_v2_reference_gwas_catalog_by_location_get_serialize(
            start=start,
            end=end,
            chromosome=chromosome,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseGWAS",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_gwas_catalog_by_location_api_v2_reference_gwas_catalog_by_location_get_without_preload_content(
        self,
        start: Annotated[int, Field(le=250000000, strict=True, ge=0)],
        end: Annotated[int, Field(le=250000000, strict=True, ge=0)],
        chromosome: Chromosome,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Gwas Catalog By Location

        Find the GWAS Catalog on a certain chromosome between start and end locations.

        :param start: (required)
        :type start: int
        :param end: (required)
        :type end: int
        :param chromosome: (required)
        :type chromosome: Chromosome
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_gwas_catalog_by_location_api_v2_reference_gwas_catalog_by_location_get_serialize(
            start=start,
            end=end,
            chromosome=chromosome,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseGWAS",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_gwas_catalog_by_location_api_v2_reference_gwas_catalog_by_location_get_serialize(
        self,
        start,
        end,
        chromosome,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            
            _query_params.append(('start', start))
            
        if end is not None:
            
            _query_params.append(('end', end))
            
        if chromosome is not None:
            
            _query_params.append(('chromosome', chromosome.value))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/reference/gwasCatalogByLocation',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_neighbor_gene_api_v2_reference_neighbor_gene_get(
        self,
        pos: Annotated[int, Field(le=248945542, strict=True, ge=0)],
        chromosome: Chromosome,
        bp_window: Annotated[int, Field(le=248936581, strict=True, ge=0)],
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        gencode_version: Annotated[Optional[Any], Field(description="GENCODE annotation release.")] = None,
        genome_build: Optional[Any] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseGene:
        """Get Neighbor Gene

        Find all neighboring genes on a certain chromosome around a position with a certain window size.

        :param pos: (required)
        :type pos: int
        :param chromosome: (required)
        :type chromosome: Chromosome
        :param bp_window: (required)
        :type bp_window: int
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param gencode_version: GENCODE annotation release.
        :type gencode_version: AppModelsRequestParametersGencodeVersion
        :param genome_build:
        :type genome_build: AppModelsRequestParametersGenomeBuild
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_neighbor_gene_api_v2_reference_neighbor_gene_get_serialize(
            pos=pos,
            chromosome=chromosome,
            bp_window=bp_window,
            page=page,
            gencode_version=gencode_version,
            genome_build=genome_build,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseGene",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_neighbor_gene_api_v2_reference_neighbor_gene_get_with_http_info(
        self,
        pos: Annotated[int, Field(le=248945542, strict=True, ge=0)],
        chromosome: Chromosome,
        bp_window: Annotated[int, Field(le=248936581, strict=True, ge=0)],
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        gencode_version: Annotated[Optional[Any], Field(description="GENCODE annotation release.")] = None,
        genome_build: Optional[Any] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseGene]:
        """Get Neighbor Gene

        Find all neighboring genes on a certain chromosome around a position with a certain window size.

        :param pos: (required)
        :type pos: int
        :param chromosome: (required)
        :type chromosome: Chromosome
        :param bp_window: (required)
        :type bp_window: int
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param gencode_version: GENCODE annotation release.
        :type gencode_version: AppModelsRequestParametersGencodeVersion
        :param genome_build:
        :type genome_build: AppModelsRequestParametersGenomeBuild
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_neighbor_gene_api_v2_reference_neighbor_gene_get_serialize(
            pos=pos,
            chromosome=chromosome,
            bp_window=bp_window,
            page=page,
            gencode_version=gencode_version,
            genome_build=genome_build,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseGene",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_neighbor_gene_api_v2_reference_neighbor_gene_get_without_preload_content(
        self,
        pos: Annotated[int, Field(le=248945542, strict=True, ge=0)],
        chromosome: Chromosome,
        bp_window: Annotated[int, Field(le=248936581, strict=True, ge=0)],
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        gencode_version: Annotated[Optional[Any], Field(description="GENCODE annotation release.")] = None,
        genome_build: Optional[Any] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Neighbor Gene

        Find all neighboring genes on a certain chromosome around a position with a certain window size.

        :param pos: (required)
        :type pos: int
        :param chromosome: (required)
        :type chromosome: Chromosome
        :param bp_window: (required)
        :type bp_window: int
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param gencode_version: GENCODE annotation release.
        :type gencode_version: AppModelsRequestParametersGencodeVersion
        :param genome_build:
        :type genome_build: AppModelsRequestParametersGenomeBuild
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_neighbor_gene_api_v2_reference_neighbor_gene_get_serialize(
            pos=pos,
            chromosome=chromosome,
            bp_window=bp_window,
            page=page,
            gencode_version=gencode_version,
            genome_build=genome_build,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseGene",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_neighbor_gene_api_v2_reference_neighbor_gene_get_serialize(
        self,
        pos,
        chromosome,
        bp_window,
        page,
        gencode_version,
        genome_build,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if pos is not None:
            
            _query_params.append(('pos', pos))
            
        if chromosome is not None:
            
            _query_params.append(('chromosome', chromosome.value))
            
        if bp_window is not None:
            
            _query_params.append(('bp_window', bp_window))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if gencode_version is not None:
            
            _query_params.append(('gencodeVersion', gencode_version.value))
            
        if genome_build is not None:
            
            _query_params.append(('genomeBuild', genome_build.value))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/reference/neighborGene',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_transcripts_api_v2_reference_transcript_get(
        self,
        gencode_id: Annotated[StrictStr, Field(description="A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9")],
        gencode_version: Annotated[Optional[Any], Field(description="GENCODE annotation release.")] = None,
        genome_build: Optional[Any] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseTranscript:
        """Get Transcripts

        Find all transcripts of a reference gene.  - This service returns information about transcripts of the given versioned GENCODE ID. - A genome build and GENCODE version must be provided. - By default, this service queries the genome build and GENCODE version used by the latest GTEx release.

        :param gencode_id: A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9 (required)
        :type gencode_id: str
        :param gencode_version: GENCODE annotation release.
        :type gencode_version: AppModelsRequestParametersGencodeVersion
        :param genome_build:
        :type genome_build: AppModelsRequestParametersGenomeBuild
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_transcripts_api_v2_reference_transcript_get_serialize(
            gencode_id=gencode_id,
            gencode_version=gencode_version,
            genome_build=genome_build,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseTranscript",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_transcripts_api_v2_reference_transcript_get_with_http_info(
        self,
        gencode_id: Annotated[StrictStr, Field(description="A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9")],
        gencode_version: Annotated[Optional[Any], Field(description="GENCODE annotation release.")] = None,
        genome_build: Optional[Any] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseTranscript]:
        """Get Transcripts

        Find all transcripts of a reference gene.  - This service returns information about transcripts of the given versioned GENCODE ID. - A genome build and GENCODE version must be provided. - By default, this service queries the genome build and GENCODE version used by the latest GTEx release.

        :param gencode_id: A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9 (required)
        :type gencode_id: str
        :param gencode_version: GENCODE annotation release.
        :type gencode_version: AppModelsRequestParametersGencodeVersion
        :param genome_build:
        :type genome_build: AppModelsRequestParametersGenomeBuild
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_transcripts_api_v2_reference_transcript_get_serialize(
            gencode_id=gencode_id,
            gencode_version=gencode_version,
            genome_build=genome_build,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseTranscript",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_transcripts_api_v2_reference_transcript_get_without_preload_content(
        self,
        gencode_id: Annotated[StrictStr, Field(description="A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9")],
        gencode_version: Annotated[Optional[Any], Field(description="GENCODE annotation release.")] = None,
        genome_build: Optional[Any] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Transcripts

        Find all transcripts of a reference gene.  - This service returns information about transcripts of the given versioned GENCODE ID. - A genome build and GENCODE version must be provided. - By default, this service queries the genome build and GENCODE version used by the latest GTEx release.

        :param gencode_id: A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9 (required)
        :type gencode_id: str
        :param gencode_version: GENCODE annotation release.
        :type gencode_version: AppModelsRequestParametersGencodeVersion
        :param genome_build:
        :type genome_build: AppModelsRequestParametersGenomeBuild
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_transcripts_api_v2_reference_transcript_get_serialize(
            gencode_id=gencode_id,
            gencode_version=gencode_version,
            genome_build=genome_build,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseTranscript",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_transcripts_api_v2_reference_transcript_get_serialize(
        self,
        gencode_id,
        gencode_version,
        genome_build,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if gencode_id is not None:
            
            _query_params.append(('gencodeId', gencode_id))
            
        if gencode_version is not None:
            
            _query_params.append(('gencodeVersion', gencode_version.value))
            
        if genome_build is not None:
            
            _query_params.append(('genomeBuild', genome_build.value))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/reference/transcript',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


