# coding: utf-8

"""
    GTEx Portal API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Any, List, Optional
from typing_extensions import Annotated
from gtex_openapi.models.igv_response import IGVResponse
from gtex_openapi.models.paginated_response_eqtl_gene import PaginatedResponseEqtlGene
from gtex_openapi.models.paginated_response_fine_mapping import PaginatedResponseFineMapping
from gtex_openapi.models.paginated_response_independent_eqtl import PaginatedResponseIndependentEqtl
from gtex_openapi.models.paginated_response_meta_soft import PaginatedResponseMetaSoft
from gtex_openapi.models.paginated_response_s_gene import PaginatedResponseSGene
from gtex_openapi.models.paginated_response_single_tissue_eqtl import PaginatedResponseSingleTissueEqtl
from gtex_openapi.models.paginated_response_single_tissue_i_eqtl import PaginatedResponseSingleTissueIEqtl
from gtex_openapi.models.paginated_response_single_tissue_i_sqtl import PaginatedResponseSingleTissueISqtl
from gtex_openapi.models.paginated_response_single_tissue_sqtl import PaginatedResponseSingleTissueSqtl
from gtex_openapi.models.tissuesitedetailid_inner import TissuesitedetailidInner

from gtex_openapi.api_client import ApiClient, RequestSerialized
from gtex_openapi.api_response import ApiResponse
from gtex_openapi.rest import RESTResponseType


class StaticAssociationEndpointsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_eqtl_genes_api_v2_association_egene_get(
        self,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseEqtlGene:
        """Get Eqtl Genes

        Retrieve eGenes (eQTL Genes).  - This service returns eGenes (eQTL Genes) from the specified dataset. - eGenes are genes that have at least one significant cis-eQTL acting upon them. - Results may be filtered by tissue. By default, the service queries the latest GTEx release.  For each eGene, the results include the allelic fold change (log2AllelicFoldChange), p-value (pValue), p-value threshold (pValueThreshold), empirical p-value (empiricalPValue), and q-value (qValue).  - The log2AllelicFoldChange is the allelic fold change (in log2 scale) of the most significant eQTL. - The pValue is the nominal p-value of the most significant eQTL. - The pValueThreshold is the p-value threshold used to determine whether a cis-eQTL for this gene is  significant. For more details see https://gtexportal.org/home/documentationPage#staticTextAnalysisMethods. - The empiricalPValue is the beta distribution-adjusted empirical p-value from FastQTL. - The qValues were calculated based on the empirical p-values. A false discovery rate (FDR) threshold of <= 0.05 was applied to identify genes with a significant eQTL.

        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_eqtl_genes_api_v2_association_egene_get_serialize(
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseEqtlGene",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_eqtl_genes_api_v2_association_egene_get_with_http_info(
        self,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseEqtlGene]:
        """Get Eqtl Genes

        Retrieve eGenes (eQTL Genes).  - This service returns eGenes (eQTL Genes) from the specified dataset. - eGenes are genes that have at least one significant cis-eQTL acting upon them. - Results may be filtered by tissue. By default, the service queries the latest GTEx release.  For each eGene, the results include the allelic fold change (log2AllelicFoldChange), p-value (pValue), p-value threshold (pValueThreshold), empirical p-value (empiricalPValue), and q-value (qValue).  - The log2AllelicFoldChange is the allelic fold change (in log2 scale) of the most significant eQTL. - The pValue is the nominal p-value of the most significant eQTL. - The pValueThreshold is the p-value threshold used to determine whether a cis-eQTL for this gene is  significant. For more details see https://gtexportal.org/home/documentationPage#staticTextAnalysisMethods. - The empiricalPValue is the beta distribution-adjusted empirical p-value from FastQTL. - The qValues were calculated based on the empirical p-values. A false discovery rate (FDR) threshold of <= 0.05 was applied to identify genes with a significant eQTL.

        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_eqtl_genes_api_v2_association_egene_get_serialize(
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseEqtlGene",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_eqtl_genes_api_v2_association_egene_get_without_preload_content(
        self,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Eqtl Genes

        Retrieve eGenes (eQTL Genes).  - This service returns eGenes (eQTL Genes) from the specified dataset. - eGenes are genes that have at least one significant cis-eQTL acting upon them. - Results may be filtered by tissue. By default, the service queries the latest GTEx release.  For each eGene, the results include the allelic fold change (log2AllelicFoldChange), p-value (pValue), p-value threshold (pValueThreshold), empirical p-value (empiricalPValue), and q-value (qValue).  - The log2AllelicFoldChange is the allelic fold change (in log2 scale) of the most significant eQTL. - The pValue is the nominal p-value of the most significant eQTL. - The pValueThreshold is the p-value threshold used to determine whether a cis-eQTL for this gene is  significant. For more details see https://gtexportal.org/home/documentationPage#staticTextAnalysisMethods. - The empiricalPValue is the beta distribution-adjusted empirical p-value from FastQTL. - The qValues were calculated based on the empirical p-values. A false discovery rate (FDR) threshold of <= 0.05 was applied to identify genes with a significant eQTL.

        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_eqtl_genes_api_v2_association_egene_get_serialize(
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseEqtlGene",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_eqtl_genes_api_v2_association_egene_get_serialize(
        self,
        tissue_site_detail_id,
        dataset_id,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'tissueSiteDetailId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/association/egene',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_fine_mapping_api_v2_association_fine_mapping_get(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        variant_id: Annotated[Optional[StrictStr], Field(description="A gtex variant ID")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseFineMapping:
        """Get Fine Mapping

        Retrieve Fine Mapping Data  - Finds and returns `Fine Mapping` data for the provided list of genes - By default, this endpoint fetches data from the latest `GTEx` version  The retrieved data is split into pages with `items_per_page` entries per page

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param variant_id: A gtex variant ID
        :type variant_id: str
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_fine_mapping_api_v2_association_fine_mapping_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            variant_id=variant_id,
            tissue_site_detail_id=tissue_site_detail_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseFineMapping",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_fine_mapping_api_v2_association_fine_mapping_get_with_http_info(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        variant_id: Annotated[Optional[StrictStr], Field(description="A gtex variant ID")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseFineMapping]:
        """Get Fine Mapping

        Retrieve Fine Mapping Data  - Finds and returns `Fine Mapping` data for the provided list of genes - By default, this endpoint fetches data from the latest `GTEx` version  The retrieved data is split into pages with `items_per_page` entries per page

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param variant_id: A gtex variant ID
        :type variant_id: str
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_fine_mapping_api_v2_association_fine_mapping_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            variant_id=variant_id,
            tissue_site_detail_id=tissue_site_detail_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseFineMapping",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_fine_mapping_api_v2_association_fine_mapping_get_without_preload_content(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        variant_id: Annotated[Optional[StrictStr], Field(description="A gtex variant ID")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Fine Mapping

        Retrieve Fine Mapping Data  - Finds and returns `Fine Mapping` data for the provided list of genes - By default, this endpoint fetches data from the latest `GTEx` version  The retrieved data is split into pages with `items_per_page` entries per page

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param variant_id: A gtex variant ID
        :type variant_id: str
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_fine_mapping_api_v2_association_fine_mapping_get_serialize(
            gencode_id=gencode_id,
            dataset_id=dataset_id,
            variant_id=variant_id,
            tissue_site_detail_id=tissue_site_detail_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseFineMapping",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_fine_mapping_api_v2_association_fine_mapping_get_serialize(
        self,
        gencode_id,
        dataset_id,
        variant_id,
        tissue_site_detail_id,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'gencodeId': 'multi',
            'tissueSiteDetailId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if gencode_id is not None:
            
            _query_params.append(('gencodeId', gencode_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        if variant_id is not None:
            
            _query_params.append(('variantId', variant_id))
            
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/association/fineMapping',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_independent_eqtl_api_v2_association_independent_eqtl_get(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseIndependentEqtl:
        """Get Independent Eqtl

        Retrieve Independent eQTL Data  - Finds and returns `Independent eQTL Data` data for the provided list of genes - By default, this endpoint fetches data from the latest `GTEx` version  The retrieved data is split into pages with `items_per_page` entries per page

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_independent_eqtl_api_v2_association_independent_eqtl_get_serialize(
            gencode_id=gencode_id,
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseIndependentEqtl",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_independent_eqtl_api_v2_association_independent_eqtl_get_with_http_info(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseIndependentEqtl]:
        """Get Independent Eqtl

        Retrieve Independent eQTL Data  - Finds and returns `Independent eQTL Data` data for the provided list of genes - By default, this endpoint fetches data from the latest `GTEx` version  The retrieved data is split into pages with `items_per_page` entries per page

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_independent_eqtl_api_v2_association_independent_eqtl_get_serialize(
            gencode_id=gencode_id,
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseIndependentEqtl",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_independent_eqtl_api_v2_association_independent_eqtl_get_without_preload_content(
        self,
        gencode_id: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")],
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Independent Eqtl

        Retrieve Independent eQTL Data  - Finds and returns `Independent eQTL Data` data for the provided list of genes - By default, this endpoint fetches data from the latest `GTEx` version  The retrieved data is split into pages with `items_per_page` entries per page

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5 (required)
        :type gencode_id: List[str]
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_independent_eqtl_api_v2_association_independent_eqtl_get_serialize(
            gencode_id=gencode_id,
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseIndependentEqtl",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_independent_eqtl_api_v2_association_independent_eqtl_get_serialize(
        self,
        gencode_id,
        tissue_site_detail_id,
        dataset_id,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'gencodeId': 'multi',
            'tissueSiteDetailId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if gencode_id is not None:
            
            _query_params.append(('gencodeId', gencode_id))
            
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/association/independentEqtl',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_multi_tissue_eqtls_api_v2_association_metasoft_get(
        self,
        gencode_id: Annotated[StrictStr, Field(description="A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9")],
        variant_id: Annotated[Optional[StrictStr], Field(description="A gtex variant ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseMetaSoft:
        """Get Multi Tissue Eqtls

        Find multi-tissue eQTL `Metasoft` results.  - This service returns multi-tissue eQTL Metasoft results for a given gene and variant in a specified dataset. - A Versioned GENCODE ID must be provided. - For each tissue, the results include: m-value (mValue), normalized effect size (nes), p-value (pValue), and standard error (se). - The m-value is the posterior probability that an eQTL effect exists in each tissue tested in the cross-tissue meta-analysis (Han and Eskin, PLoS Genetics 8(3): e1002555, 2012). - The normalized effect size is the slope of the linear regression of normalized expression data versus the three genotype categories using single-tissue eQTL analysis, representing eQTL effect size. - The p-value is from a t-test that compares observed NES from single-tissue eQTL analysis to a null NES of 0.  By default, the service queries the latest GTEx release. The retrieved data is split into pages with `items_per_page` entries per page

        :param gencode_id: A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9 (required)
        :type gencode_id: str
        :param variant_id: A gtex variant ID
        :type variant_id: str
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_multi_tissue_eqtls_api_v2_association_metasoft_get_serialize(
            gencode_id=gencode_id,
            variant_id=variant_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseMetaSoft",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_multi_tissue_eqtls_api_v2_association_metasoft_get_with_http_info(
        self,
        gencode_id: Annotated[StrictStr, Field(description="A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9")],
        variant_id: Annotated[Optional[StrictStr], Field(description="A gtex variant ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseMetaSoft]:
        """Get Multi Tissue Eqtls

        Find multi-tissue eQTL `Metasoft` results.  - This service returns multi-tissue eQTL Metasoft results for a given gene and variant in a specified dataset. - A Versioned GENCODE ID must be provided. - For each tissue, the results include: m-value (mValue), normalized effect size (nes), p-value (pValue), and standard error (se). - The m-value is the posterior probability that an eQTL effect exists in each tissue tested in the cross-tissue meta-analysis (Han and Eskin, PLoS Genetics 8(3): e1002555, 2012). - The normalized effect size is the slope of the linear regression of normalized expression data versus the three genotype categories using single-tissue eQTL analysis, representing eQTL effect size. - The p-value is from a t-test that compares observed NES from single-tissue eQTL analysis to a null NES of 0.  By default, the service queries the latest GTEx release. The retrieved data is split into pages with `items_per_page` entries per page

        :param gencode_id: A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9 (required)
        :type gencode_id: str
        :param variant_id: A gtex variant ID
        :type variant_id: str
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_multi_tissue_eqtls_api_v2_association_metasoft_get_serialize(
            gencode_id=gencode_id,
            variant_id=variant_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseMetaSoft",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_multi_tissue_eqtls_api_v2_association_metasoft_get_without_preload_content(
        self,
        gencode_id: Annotated[StrictStr, Field(description="A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9")],
        variant_id: Annotated[Optional[StrictStr], Field(description="A gtex variant ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Multi Tissue Eqtls

        Find multi-tissue eQTL `Metasoft` results.  - This service returns multi-tissue eQTL Metasoft results for a given gene and variant in a specified dataset. - A Versioned GENCODE ID must be provided. - For each tissue, the results include: m-value (mValue), normalized effect size (nes), p-value (pValue), and standard error (se). - The m-value is the posterior probability that an eQTL effect exists in each tissue tested in the cross-tissue meta-analysis (Han and Eskin, PLoS Genetics 8(3): e1002555, 2012). - The normalized effect size is the slope of the linear regression of normalized expression data versus the three genotype categories using single-tissue eQTL analysis, representing eQTL effect size. - The p-value is from a t-test that compares observed NES from single-tissue eQTL analysis to a null NES of 0.  By default, the service queries the latest GTEx release. The retrieved data is split into pages with `items_per_page` entries per page

        :param gencode_id: A Versioned GENCODE ID of a gene, e.g. ENSG00000065613.9 (required)
        :type gencode_id: str
        :param variant_id: A gtex variant ID
        :type variant_id: str
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_multi_tissue_eqtls_api_v2_association_metasoft_get_serialize(
            gencode_id=gencode_id,
            variant_id=variant_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseMetaSoft",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_multi_tissue_eqtls_api_v2_association_metasoft_get_serialize(
        self,
        gencode_id,
        variant_id,
        dataset_id,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if gencode_id is not None:
            
            _query_params.append(('gencodeId', gencode_id))
            
        if variant_id is not None:
            
            _query_params.append(('variantId', variant_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/association/metasoft',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_significant_single_tissue_eqtls_api_v2_association_single_tissue_eqtl_get(
        self,
        gencode_id: Annotated[Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")] = None,
        variant_id: Annotated[Optional[List[StrictStr]], Field(description="A gtex variant ID")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseSingleTissueEqtl:
        """Get Significant Single Tissue Eqtls

        Find significant single tissue eQTLs.  - This service returns precomputed significant single tissue eQTLs. - Results may be filtered by tissue, gene, variant or dataset. - To search by gene, use the versioned GENCODE ID. - To search by variant, use the dbSNP rs ID (snpId).  By default, the service queries the latest GTEx release and the retrieved data is split into pages with `items_per_page` entries per page

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5
        :type gencode_id: List[str]
        :param variant_id: A gtex variant ID
        :type variant_id: List[str]
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_significant_single_tissue_eqtls_api_v2_association_single_tissue_eqtl_get_serialize(
            gencode_id=gencode_id,
            variant_id=variant_id,
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSingleTissueEqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_significant_single_tissue_eqtls_api_v2_association_single_tissue_eqtl_get_with_http_info(
        self,
        gencode_id: Annotated[Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")] = None,
        variant_id: Annotated[Optional[List[StrictStr]], Field(description="A gtex variant ID")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseSingleTissueEqtl]:
        """Get Significant Single Tissue Eqtls

        Find significant single tissue eQTLs.  - This service returns precomputed significant single tissue eQTLs. - Results may be filtered by tissue, gene, variant or dataset. - To search by gene, use the versioned GENCODE ID. - To search by variant, use the dbSNP rs ID (snpId).  By default, the service queries the latest GTEx release and the retrieved data is split into pages with `items_per_page` entries per page

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5
        :type gencode_id: List[str]
        :param variant_id: A gtex variant ID
        :type variant_id: List[str]
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_significant_single_tissue_eqtls_api_v2_association_single_tissue_eqtl_get_serialize(
            gencode_id=gencode_id,
            variant_id=variant_id,
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSingleTissueEqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_significant_single_tissue_eqtls_api_v2_association_single_tissue_eqtl_get_without_preload_content(
        self,
        gencode_id: Annotated[Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")] = None,
        variant_id: Annotated[Optional[List[StrictStr]], Field(description="A gtex variant ID")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Significant Single Tissue Eqtls

        Find significant single tissue eQTLs.  - This service returns precomputed significant single tissue eQTLs. - Results may be filtered by tissue, gene, variant or dataset. - To search by gene, use the versioned GENCODE ID. - To search by variant, use the dbSNP rs ID (snpId).  By default, the service queries the latest GTEx release and the retrieved data is split into pages with `items_per_page` entries per page

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5
        :type gencode_id: List[str]
        :param variant_id: A gtex variant ID
        :type variant_id: List[str]
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_significant_single_tissue_eqtls_api_v2_association_single_tissue_eqtl_get_serialize(
            gencode_id=gencode_id,
            variant_id=variant_id,
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSingleTissueEqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_significant_single_tissue_eqtls_api_v2_association_single_tissue_eqtl_get_serialize(
        self,
        gencode_id,
        variant_id,
        tissue_site_detail_id,
        dataset_id,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'gencodeId': 'multi',
            'variantId': 'multi',
            'tissueSiteDetailId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if gencode_id is not None:
            
            _query_params.append(('gencodeId', gencode_id))
            
        if variant_id is not None:
            
            _query_params.append(('variantId', variant_id))
            
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/association/singleTissueEqtl',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_significant_single_tissue_eqtls_by_location_api_v2_association_single_tissue_eqtl_by_location_get(
        self,
        tissue_site_detail_id: Annotated[Any, Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")],
        start: Annotated[int, Field(le=250000000, strict=True, ge=0)],
        end: Annotated[int, Field(le=250000000, strict=True, ge=0)],
        chromosome: Annotated[Any, Field(description="Chromosome to Query")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IGVResponse:
        """Get Significant Single Tissue Eqtls By Location

        Find significant single tissue eQTLs using Chromosomal Locations.  - This service returns precomputed significant single tissue eQTLs. - Results may be filtered by tissue, and/or dataset.  By default, the service queries the latest GTEx release. Since this endpoint is used to support a  third party program on the portal, the return structure is different from other endpoints and is not paginated.

        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID (required)
        :type tissue_site_detail_id: TissueSiteDetailId
        :param start: (required)
        :type start: int
        :param end: (required)
        :type end: int
        :param chromosome: Chromosome to Query (required)
        :type chromosome: Chromosome
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_significant_single_tissue_eqtls_by_location_api_v2_association_single_tissue_eqtl_by_location_get_serialize(
            tissue_site_detail_id=tissue_site_detail_id,
            start=start,
            end=end,
            chromosome=chromosome,
            dataset_id=dataset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IGVResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_significant_single_tissue_eqtls_by_location_api_v2_association_single_tissue_eqtl_by_location_get_with_http_info(
        self,
        tissue_site_detail_id: Annotated[Any, Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")],
        start: Annotated[int, Field(le=250000000, strict=True, ge=0)],
        end: Annotated[int, Field(le=250000000, strict=True, ge=0)],
        chromosome: Annotated[Any, Field(description="Chromosome to Query")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IGVResponse]:
        """Get Significant Single Tissue Eqtls By Location

        Find significant single tissue eQTLs using Chromosomal Locations.  - This service returns precomputed significant single tissue eQTLs. - Results may be filtered by tissue, and/or dataset.  By default, the service queries the latest GTEx release. Since this endpoint is used to support a  third party program on the portal, the return structure is different from other endpoints and is not paginated.

        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID (required)
        :type tissue_site_detail_id: TissueSiteDetailId
        :param start: (required)
        :type start: int
        :param end: (required)
        :type end: int
        :param chromosome: Chromosome to Query (required)
        :type chromosome: Chromosome
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_significant_single_tissue_eqtls_by_location_api_v2_association_single_tissue_eqtl_by_location_get_serialize(
            tissue_site_detail_id=tissue_site_detail_id,
            start=start,
            end=end,
            chromosome=chromosome,
            dataset_id=dataset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IGVResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_significant_single_tissue_eqtls_by_location_api_v2_association_single_tissue_eqtl_by_location_get_without_preload_content(
        self,
        tissue_site_detail_id: Annotated[Any, Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")],
        start: Annotated[int, Field(le=250000000, strict=True, ge=0)],
        end: Annotated[int, Field(le=250000000, strict=True, ge=0)],
        chromosome: Annotated[Any, Field(description="Chromosome to Query")],
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Significant Single Tissue Eqtls By Location

        Find significant single tissue eQTLs using Chromosomal Locations.  - This service returns precomputed significant single tissue eQTLs. - Results may be filtered by tissue, and/or dataset.  By default, the service queries the latest GTEx release. Since this endpoint is used to support a  third party program on the portal, the return structure is different from other endpoints and is not paginated.

        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID (required)
        :type tissue_site_detail_id: TissueSiteDetailId
        :param start: (required)
        :type start: int
        :param end: (required)
        :type end: int
        :param chromosome: Chromosome to Query (required)
        :type chromosome: Chromosome
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_significant_single_tissue_eqtls_by_location_api_v2_association_single_tissue_eqtl_by_location_get_serialize(
            tissue_site_detail_id=tissue_site_detail_id,
            start=start,
            end=end,
            chromosome=chromosome,
            dataset_id=dataset_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IGVResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_significant_single_tissue_eqtls_by_location_api_v2_association_single_tissue_eqtl_by_location_get_serialize(
        self,
        tissue_site_detail_id,
        start,
        end,
        chromosome,
        dataset_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id.value))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if end is not None:
            
            _query_params.append(('end', end))
            
        if chromosome is not None:
            
            _query_params.append(('chromosome', chromosome.value))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/association/singleTissueEqtlByLocation',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_significant_single_tissue_ieqtls_api_v2_association_single_tissue_i_eqtl_get(
        self,
        gencode_id: Annotated[Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")] = None,
        variant_id: Annotated[Optional[List[StrictStr]], Field(description="A gtex variant ID")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseSingleTissueIEqtl:
        """Get Significant Single Tissue Ieqtls

        Retrieve Interaction eQTL Data.  - This service returns cell type interaction eQTLs (ieQTLs), from a specified dataset. - Results may be filtered by tissue - By default, the service queries the latest GTEx release.  The retrieved data is split into pages with `items_per_page` entries per page

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5
        :type gencode_id: List[str]
        :param variant_id: A gtex variant ID
        :type variant_id: List[str]
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_significant_single_tissue_ieqtls_api_v2_association_single_tissue_i_eqtl_get_serialize(
            gencode_id=gencode_id,
            variant_id=variant_id,
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSingleTissueIEqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_significant_single_tissue_ieqtls_api_v2_association_single_tissue_i_eqtl_get_with_http_info(
        self,
        gencode_id: Annotated[Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")] = None,
        variant_id: Annotated[Optional[List[StrictStr]], Field(description="A gtex variant ID")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseSingleTissueIEqtl]:
        """Get Significant Single Tissue Ieqtls

        Retrieve Interaction eQTL Data.  - This service returns cell type interaction eQTLs (ieQTLs), from a specified dataset. - Results may be filtered by tissue - By default, the service queries the latest GTEx release.  The retrieved data is split into pages with `items_per_page` entries per page

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5
        :type gencode_id: List[str]
        :param variant_id: A gtex variant ID
        :type variant_id: List[str]
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_significant_single_tissue_ieqtls_api_v2_association_single_tissue_i_eqtl_get_serialize(
            gencode_id=gencode_id,
            variant_id=variant_id,
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSingleTissueIEqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_significant_single_tissue_ieqtls_api_v2_association_single_tissue_i_eqtl_get_without_preload_content(
        self,
        gencode_id: Annotated[Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")] = None,
        variant_id: Annotated[Optional[List[StrictStr]], Field(description="A gtex variant ID")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Significant Single Tissue Ieqtls

        Retrieve Interaction eQTL Data.  - This service returns cell type interaction eQTLs (ieQTLs), from a specified dataset. - Results may be filtered by tissue - By default, the service queries the latest GTEx release.  The retrieved data is split into pages with `items_per_page` entries per page

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5
        :type gencode_id: List[str]
        :param variant_id: A gtex variant ID
        :type variant_id: List[str]
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_significant_single_tissue_ieqtls_api_v2_association_single_tissue_i_eqtl_get_serialize(
            gencode_id=gencode_id,
            variant_id=variant_id,
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSingleTissueIEqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_significant_single_tissue_ieqtls_api_v2_association_single_tissue_i_eqtl_get_serialize(
        self,
        gencode_id,
        variant_id,
        tissue_site_detail_id,
        dataset_id,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'gencodeId': 'multi',
            'variantId': 'multi',
            'tissueSiteDetailId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if gencode_id is not None:
            
            _query_params.append(('gencodeId', gencode_id))
            
        if variant_id is not None:
            
            _query_params.append(('variantId', variant_id))
            
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/association/singleTissueIEqtl',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_significant_single_tissue_isqtls_api_v2_association_single_tissue_i_sqtl_get(
        self,
        gencode_id: Annotated[Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")] = None,
        variant_id: Annotated[Optional[List[StrictStr]], Field(description="A gtex variant ID")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseSingleTissueISqtl:
        """Get Significant Single Tissue Isqtls

        Retrieve Interaction sQTL Data.  - This service retrieves cell type interaction sQTLs (isQTLs), from a specified dataset. - Results may be filtered by tissue - By default, the service queries the latest GTEx release.  The retrieved data is split into pages with `items_per_page` entries per page

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5
        :type gencode_id: List[str]
        :param variant_id: A gtex variant ID
        :type variant_id: List[str]
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_significant_single_tissue_isqtls_api_v2_association_single_tissue_i_sqtl_get_serialize(
            gencode_id=gencode_id,
            variant_id=variant_id,
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSingleTissueISqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_significant_single_tissue_isqtls_api_v2_association_single_tissue_i_sqtl_get_with_http_info(
        self,
        gencode_id: Annotated[Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")] = None,
        variant_id: Annotated[Optional[List[StrictStr]], Field(description="A gtex variant ID")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseSingleTissueISqtl]:
        """Get Significant Single Tissue Isqtls

        Retrieve Interaction sQTL Data.  - This service retrieves cell type interaction sQTLs (isQTLs), from a specified dataset. - Results may be filtered by tissue - By default, the service queries the latest GTEx release.  The retrieved data is split into pages with `items_per_page` entries per page

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5
        :type gencode_id: List[str]
        :param variant_id: A gtex variant ID
        :type variant_id: List[str]
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_significant_single_tissue_isqtls_api_v2_association_single_tissue_i_sqtl_get_serialize(
            gencode_id=gencode_id,
            variant_id=variant_id,
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSingleTissueISqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_significant_single_tissue_isqtls_api_v2_association_single_tissue_i_sqtl_get_without_preload_content(
        self,
        gencode_id: Annotated[Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")] = None,
        variant_id: Annotated[Optional[List[StrictStr]], Field(description="A gtex variant ID")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Significant Single Tissue Isqtls

        Retrieve Interaction sQTL Data.  - This service retrieves cell type interaction sQTLs (isQTLs), from a specified dataset. - Results may be filtered by tissue - By default, the service queries the latest GTEx release.  The retrieved data is split into pages with `items_per_page` entries per page

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5
        :type gencode_id: List[str]
        :param variant_id: A gtex variant ID
        :type variant_id: List[str]
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_significant_single_tissue_isqtls_api_v2_association_single_tissue_i_sqtl_get_serialize(
            gencode_id=gencode_id,
            variant_id=variant_id,
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSingleTissueISqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_significant_single_tissue_isqtls_api_v2_association_single_tissue_i_sqtl_get_serialize(
        self,
        gencode_id,
        variant_id,
        tissue_site_detail_id,
        dataset_id,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'gencodeId': 'multi',
            'variantId': 'multi',
            'tissueSiteDetailId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if gencode_id is not None:
            
            _query_params.append(('gencodeId', gencode_id))
            
        if variant_id is not None:
            
            _query_params.append(('variantId', variant_id))
            
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/association/singleTissueISqtl',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_significant_single_tissue_sqtls_api_v2_association_single_tissue_sqtl_get(
        self,
        gencode_id: Annotated[Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")] = None,
        variant_id: Annotated[Optional[List[StrictStr]], Field(description="A gtex variant ID")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseSingleTissueSqtl:
        """Get Significant Single Tissue Sqtls

        Retrieve Single Tissue sQTL Data.  - This service returns single tissue sQTL data for the given genes, from a specified dataset. - Results may be filtered by tissue - By default, the service queries the latest GTEx release.  The retrieved data is split into pages with `items_per_page` entries per page

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5
        :type gencode_id: List[str]
        :param variant_id: A gtex variant ID
        :type variant_id: List[str]
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_significant_single_tissue_sqtls_api_v2_association_single_tissue_sqtl_get_serialize(
            gencode_id=gencode_id,
            variant_id=variant_id,
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSingleTissueSqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_significant_single_tissue_sqtls_api_v2_association_single_tissue_sqtl_get_with_http_info(
        self,
        gencode_id: Annotated[Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")] = None,
        variant_id: Annotated[Optional[List[StrictStr]], Field(description="A gtex variant ID")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseSingleTissueSqtl]:
        """Get Significant Single Tissue Sqtls

        Retrieve Single Tissue sQTL Data.  - This service returns single tissue sQTL data for the given genes, from a specified dataset. - Results may be filtered by tissue - By default, the service queries the latest GTEx release.  The retrieved data is split into pages with `items_per_page` entries per page

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5
        :type gencode_id: List[str]
        :param variant_id: A gtex variant ID
        :type variant_id: List[str]
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_significant_single_tissue_sqtls_api_v2_association_single_tissue_sqtl_get_serialize(
            gencode_id=gencode_id,
            variant_id=variant_id,
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSingleTissueSqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_significant_single_tissue_sqtls_api_v2_association_single_tissue_sqtl_get_without_preload_content(
        self,
        gencode_id: Annotated[Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=60000)]]], Field(description="A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5")] = None,
        variant_id: Annotated[Optional[List[StrictStr]], Field(description="A gtex variant ID")] = None,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Significant Single Tissue Sqtls

        Retrieve Single Tissue sQTL Data.  - This service returns single tissue sQTL data for the given genes, from a specified dataset. - Results may be filtered by tissue - By default, the service queries the latest GTEx release.  The retrieved data is split into pages with `items_per_page` entries per page

        :param gencode_id: A list of Versioned GENCODE IDs, e.g. ENSG00000065613.9,ENSG00000203782.5
        :type gencode_id: List[str]
        :param variant_id: A gtex variant ID
        :type variant_id: List[str]
        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_significant_single_tissue_sqtls_api_v2_association_single_tissue_sqtl_get_serialize(
            gencode_id=gencode_id,
            variant_id=variant_id,
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSingleTissueSqtl",
            '400': "Message",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_significant_single_tissue_sqtls_api_v2_association_single_tissue_sqtl_get_serialize(
        self,
        gencode_id,
        variant_id,
        tissue_site_detail_id,
        dataset_id,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'gencodeId': 'multi',
            'variantId': 'multi',
            'tissueSiteDetailId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if gencode_id is not None:
            
            _query_params.append(('gencodeId', gencode_id))
            
        if variant_id is not None:
            
            _query_params.append(('variantId', variant_id))
            
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/association/singleTissueSqtl',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_sqtl_genes_api_v2_association_sgene_get(
        self,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseSGene:
        """Get Sqtl Genes

        Retrieve sGenes (sQTL Genes).  - This service returns sGenes (sQTL Genes) from the specified dataset. - Results may be filtered by tissue. - By default, the service queries the latest GTEx release.  The retrieved data is split into pages with `items_per_page` entries per page

        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sqtl_genes_api_v2_association_sgene_get_serialize(
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSGene",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_sqtl_genes_api_v2_association_sgene_get_with_http_info(
        self,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseSGene]:
        """Get Sqtl Genes

        Retrieve sGenes (sQTL Genes).  - This service returns sGenes (sQTL Genes) from the specified dataset. - Results may be filtered by tissue. - By default, the service queries the latest GTEx release.  The retrieved data is split into pages with `items_per_page` entries per page

        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sqtl_genes_api_v2_association_sgene_get_serialize(
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSGene",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_sqtl_genes_api_v2_association_sgene_get_without_preload_content(
        self,
        tissue_site_detail_id: Annotated[Optional[List[TissuesitedetailidInner]], Field(description="A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID")] = None,
        dataset_id: Annotated[Optional[Any], Field(description="Unique identifier of a dataset. Usually includes a data source and data release.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="The 0-based numeric ID of the page to retrieve")] = None,
        items_per_page: Optional[Annotated[int, Field(le=100000, strict=True, ge=1)]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Sqtl Genes

        Retrieve sGenes (sQTL Genes).  - This service returns sGenes (sQTL Genes) from the specified dataset. - Results may be filtered by tissue. - By default, the service queries the latest GTEx release.  The retrieved data is split into pages with `items_per_page` entries per page

        :param tissue_site_detail_id: A list of Tissue IDs of the tissue(s) of interest. Can be a GTEx specific ID or an Ontology ID
        :type tissue_site_detail_id: List[TissuesitedetailidInner]
        :param dataset_id: Unique identifier of a dataset. Usually includes a data source and data release.
        :type dataset_id: DatasetId
        :param page: The 0-based numeric ID of the page to retrieve
        :type page: int
        :param items_per_page:
        :type items_per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sqtl_genes_api_v2_association_sgene_get_serialize(
            tissue_site_detail_id=tissue_site_detail_id,
            dataset_id=dataset_id,
            page=page,
            items_per_page=items_per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSGene",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_sqtl_genes_api_v2_association_sgene_get_serialize(
        self,
        tissue_site_detail_id,
        dataset_id,
        page,
        items_per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'tissueSiteDetailId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tissue_site_detail_id is not None:
            
            _query_params.append(('tissueSiteDetailId', tissue_site_detail_id))
            
        if dataset_id is not None:
            
            _query_params.append(('datasetId', dataset_id.value))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if items_per_page is not None:
            
            _query_params.append(('itemsPerPage', items_per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/association/sgene',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


