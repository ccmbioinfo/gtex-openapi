# coding: utf-8

"""
    GTEx Portal API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from gtex_openapi.models.app_models_responses_gencode_version import AppModelsResponsesGencodeVersion
from gtex_openapi.models.app_models_responses_genome_build import AppModelsResponsesGenomeBuild
from typing import Optional, Set
from typing_extensions import Self

class Dataset(BaseModel):
    """
    Dataset
    """ # noqa: E501
    dataset_id: StrictStr = Field(alias="datasetId")
    db_snp_build: StrictInt = Field(alias="dbSnpBuild")
    dbgap_id: Optional[StrictStr] = Field(default=None, alias="dbgapId")
    description: StrictStr
    display_name: StrictStr = Field(alias="displayName")
    eqtl_subject_count: StrictInt = Field(alias="eqtlSubjectCount")
    eqtl_tissues_count: StrictInt = Field(alias="eqtlTissuesCount")
    gencode_version: AppModelsResponsesGencodeVersion = Field(alias="gencodeVersion")
    genome_build: AppModelsResponsesGenomeBuild = Field(alias="genomeBuild")
    organization: StrictStr
    rna_seq_and_genotype_sample_count: StrictInt = Field(alias="rnaSeqAndGenotypeSampleCount")
    rna_seq_sample_count: StrictInt = Field(alias="rnaSeqSampleCount")
    subject_count: StrictInt = Field(alias="subjectCount")
    tissue_count: StrictInt = Field(alias="tissueCount")
    __properties: ClassVar[List[str]] = ["datasetId", "dbSnpBuild", "dbgapId", "description", "displayName", "eqtlSubjectCount", "eqtlTissuesCount", "gencodeVersion", "genomeBuild", "organization", "rnaSeqAndGenotypeSampleCount", "rnaSeqSampleCount", "subjectCount", "tissueCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Dataset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if dbgap_id (nullable) is None
        # and model_fields_set contains the field
        if self.dbgap_id is None and "dbgap_id" in self.model_fields_set:
            _dict['dbgapId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Dataset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "datasetId": obj.get("datasetId"),
            "dbSnpBuild": obj.get("dbSnpBuild"),
            "dbgapId": obj.get("dbgapId"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "eqtlSubjectCount": obj.get("eqtlSubjectCount"),
            "eqtlTissuesCount": obj.get("eqtlTissuesCount"),
            "gencodeVersion": obj.get("gencodeVersion"),
            "genomeBuild": obj.get("genomeBuild"),
            "organization": obj.get("organization"),
            "rnaSeqAndGenotypeSampleCount": obj.get("rnaSeqAndGenotypeSampleCount"),
            "rnaSeqSampleCount": obj.get("rnaSeqSampleCount"),
            "subjectCount": obj.get("subjectCount"),
            "tissueCount": obj.get("tissueCount")
        })
        return _obj


