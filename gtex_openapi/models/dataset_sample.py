# coding: utf-8

"""
    GTEx Portal API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from gtex_openapi.models.app_models_responses_hardy_scale import AppModelsResponsesHardyScale
from gtex_openapi.models.donor_age_bracket import DonorAgeBracket
from gtex_openapi.models.sex import Sex
from gtex_openapi.models.tissue_site_detail_id import TissueSiteDetailId
from typing import Optional, Set
from typing_extensions import Self

class DatasetSample(BaseModel):
    """
    DatasetSample
    """ # noqa: E501
    ischemic_time: Optional[StrictInt] = Field(default=None, alias="ischemicTime")
    aliquot_id: StrictStr = Field(alias="aliquotId")
    tissue_sample_id: StrictStr = Field(alias="tissueSampleId")
    tissue_site_detail: StrictStr = Field(alias="tissueSiteDetail")
    data_type: Optional[StrictStr] = Field(default=None, alias="dataType")
    ischemic_time_group: Optional[StrictStr] = Field(default=None, alias="ischemicTimeGroup")
    pathology_notes_categories: Dict[str, StrictBool] = Field(alias="pathologyNotesCategories")
    freeze_type: StrictStr = Field(alias="freezeType")
    pathology_notes: Optional[StrictStr] = Field(default=None, alias="pathologyNotes")
    sample_id: StrictStr = Field(alias="sampleId")
    sample_id_upper: StrictStr = Field(alias="sampleIdUpper")
    age_bracket: DonorAgeBracket = Field(alias="ageBracket")
    rin: Optional[StrictStr] = None
    hardy_scale: Optional[AppModelsResponsesHardyScale] = Field(default=None, alias="hardyScale")
    tissue_site_detail_id: TissueSiteDetailId = Field(alias="tissueSiteDetailId")
    subject_id: StrictStr = Field(alias="subjectId")
    uberon_id: StrictStr = Field(alias="uberonId")
    sex: Sex
    autolysis_score: Optional[StrictStr] = Field(default=None, alias="autolysisScore")
    dataset_id: StrictStr = Field(alias="datasetId")
    __properties: ClassVar[List[str]] = ["ischemicTime", "aliquotId", "tissueSampleId", "tissueSiteDetail", "dataType", "ischemicTimeGroup", "pathologyNotesCategories", "freezeType", "pathologyNotes", "sampleId", "sampleIdUpper", "ageBracket", "rin", "hardyScale", "tissueSiteDetailId", "subjectId", "uberonId", "sex", "autolysisScore", "datasetId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatasetSample from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if ischemic_time (nullable) is None
        # and model_fields_set contains the field
        if self.ischemic_time is None and "ischemic_time" in self.model_fields_set:
            _dict['ischemicTime'] = None

        # set to None if data_type (nullable) is None
        # and model_fields_set contains the field
        if self.data_type is None and "data_type" in self.model_fields_set:
            _dict['dataType'] = None

        # set to None if ischemic_time_group (nullable) is None
        # and model_fields_set contains the field
        if self.ischemic_time_group is None and "ischemic_time_group" in self.model_fields_set:
            _dict['ischemicTimeGroup'] = None

        # set to None if pathology_notes (nullable) is None
        # and model_fields_set contains the field
        if self.pathology_notes is None and "pathology_notes" in self.model_fields_set:
            _dict['pathologyNotes'] = None

        # set to None if rin (nullable) is None
        # and model_fields_set contains the field
        if self.rin is None and "rin" in self.model_fields_set:
            _dict['rin'] = None

        # set to None if hardy_scale (nullable) is None
        # and model_fields_set contains the field
        if self.hardy_scale is None and "hardy_scale" in self.model_fields_set:
            _dict['hardyScale'] = None

        # set to None if autolysis_score (nullable) is None
        # and model_fields_set contains the field
        if self.autolysis_score is None and "autolysis_score" in self.model_fields_set:
            _dict['autolysisScore'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatasetSample from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ischemicTime": obj.get("ischemicTime"),
            "aliquotId": obj.get("aliquotId"),
            "tissueSampleId": obj.get("tissueSampleId"),
            "tissueSiteDetail": obj.get("tissueSiteDetail"),
            "dataType": obj.get("dataType"),
            "ischemicTimeGroup": obj.get("ischemicTimeGroup"),
            "pathologyNotesCategories": obj.get("pathologyNotesCategories"),
            "freezeType": obj.get("freezeType"),
            "pathologyNotes": obj.get("pathologyNotes"),
            "sampleId": obj.get("sampleId"),
            "sampleIdUpper": obj.get("sampleIdUpper"),
            "ageBracket": obj.get("ageBracket"),
            "rin": obj.get("rin"),
            "hardyScale": obj.get("hardyScale"),
            "tissueSiteDetailId": obj.get("tissueSiteDetailId"),
            "subjectId": obj.get("subjectId"),
            "uberonId": obj.get("uberonId"),
            "sex": obj.get("sex"),
            "autolysisScore": obj.get("autolysisScore"),
            "datasetId": obj.get("datasetId")
        })
        return _obj


