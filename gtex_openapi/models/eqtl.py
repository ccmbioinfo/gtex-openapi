# coding: utf-8

"""
    GTEx Portal API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from gtex_openapi.models.tissue_site_detail_id import TissueSiteDetailId
from typing import Optional, Set
from typing_extensions import Self

class Eqtl(BaseModel):
    """
    Eqtl
    """ # noqa: E501
    data: List[Union[StrictFloat, StrictInt]]
    error: Union[StrictFloat, StrictInt]
    gencode_id: StrictStr = Field(alias="gencodeId")
    gene_symbol: StrictStr = Field(alias="geneSymbol")
    genotypes: List[StrictInt]
    het_count: StrictInt = Field(alias="hetCount")
    homo_alt_count: StrictInt = Field(alias="homoAltCount")
    homo_ref_count: StrictInt = Field(alias="homoRefCount")
    maf: Union[StrictFloat, StrictInt]
    nes: Union[StrictFloat, StrictInt]
    p_value: Union[StrictFloat, StrictInt] = Field(alias="pValue")
    p_value_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="pValueThreshold")
    t_statistic: Union[StrictFloat, StrictInt] = Field(alias="tStatistic")
    tissue_site_detail_id: TissueSiteDetailId = Field(alias="tissueSiteDetailId")
    variant_id: StrictStr = Field(alias="variantId")
    __properties: ClassVar[List[str]] = ["data", "error", "gencodeId", "geneSymbol", "genotypes", "hetCount", "homoAltCount", "homoRefCount", "maf", "nes", "pValue", "pValueThreshold", "tStatistic", "tissueSiteDetailId", "variantId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Eqtl from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if p_value_threshold (nullable) is None
        # and model_fields_set contains the field
        if self.p_value_threshold is None and "p_value_threshold" in self.model_fields_set:
            _dict['pValueThreshold'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Eqtl from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "data": obj.get("data"),
            "error": obj.get("error"),
            "gencodeId": obj.get("gencodeId"),
            "geneSymbol": obj.get("geneSymbol"),
            "genotypes": obj.get("genotypes"),
            "hetCount": obj.get("hetCount"),
            "homoAltCount": obj.get("homoAltCount"),
            "homoRefCount": obj.get("homoRefCount"),
            "maf": obj.get("maf"),
            "nes": obj.get("nes"),
            "pValue": obj.get("pValue"),
            "pValueThreshold": obj.get("pValueThreshold"),
            "tStatistic": obj.get("tStatistic"),
            "tissueSiteDetailId": obj.get("tissueSiteDetailId"),
            "variantId": obj.get("variantId")
        })
        return _obj


