# coding: utf-8

"""
    GTEx Portal API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from gtex_openapi.models.app_models_responses_gencode_version import AppModelsResponsesGencodeVersion
from gtex_openapi.models.app_models_responses_genome_build import AppModelsResponsesGenomeBuild
from gtex_openapi.models.chromosome import Chromosome
from gtex_openapi.models.strand import Strand
from typing import Optional, Set
from typing_extensions import Self

class Exon(BaseModel):
    """
    Exon
    """ # noqa: E501
    feature_type: StrictStr = Field(alias="featureType")
    end: StrictInt
    genome_build: AppModelsResponsesGenomeBuild = Field(alias="genomeBuild")
    start: StrictInt
    exon_id: StrictStr = Field(alias="exonId")
    source: StrictStr
    chromosome: Chromosome
    gencode_id: StrictStr = Field(alias="gencodeId")
    transcript_id: StrictStr = Field(alias="transcriptId")
    gene_symbol: StrictStr = Field(alias="geneSymbol")
    gencode_version: AppModelsResponsesGencodeVersion = Field(alias="gencodeVersion")
    strand: Strand
    exon_number: StrictStr = Field(alias="exonNumber")
    __properties: ClassVar[List[str]] = ["featureType", "end", "genomeBuild", "start", "exonId", "source", "chromosome", "gencodeId", "transcriptId", "geneSymbol", "gencodeVersion", "strand", "exonNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Exon from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Exon from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "featureType": obj.get("featureType"),
            "end": obj.get("end"),
            "genomeBuild": obj.get("genomeBuild"),
            "start": obj.get("start"),
            "exonId": obj.get("exonId"),
            "source": obj.get("source"),
            "chromosome": obj.get("chromosome"),
            "gencodeId": obj.get("gencodeId"),
            "transcriptId": obj.get("transcriptId"),
            "geneSymbol": obj.get("geneSymbol"),
            "gencodeVersion": obj.get("gencodeVersion"),
            "strand": obj.get("strand"),
            "exonNumber": obj.get("exonNumber")
        })
        return _obj


