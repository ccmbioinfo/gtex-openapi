# coding: utf-8

"""
    GTEx Portal API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from gtex_openapi.models.chromosome import Chromosome
from typing import Optional, Set
from typing_extensions import Self

class FunctionalAnnotation(BaseModel):
    """
    FunctionalAnnotation
    """ # noqa: E501
    variant_id: StrictStr = Field(alias="variantId")
    enhancer: StrictBool
    promoter: StrictBool
    open_chromatin_region: StrictBool = Field(alias="openChromatinRegion")
    promoter_flanking_region: StrictBool = Field(alias="promoterFlankingRegion")
    ctcf_binding_site: StrictBool = Field(alias="ctcfBindingSite")
    tf_binding_site: StrictBool = Field(alias="tfBindingSite")
    var_3_prime_utr_variant: StrictBool = Field(alias="3PrimeUtrVariant")
    var_5_prime_utr_variant: StrictBool = Field(alias="5PrimeUtrVariant")
    frameshift_variant: StrictBool = Field(alias="frameshiftVariant")
    intron_variant: StrictBool = Field(alias="intronVariant")
    missense_variant: StrictBool = Field(alias="missenseVariant")
    non_coding_transcript_exon_variant: StrictBool = Field(alias="nonCodingTranscriptExonVariant")
    splice_acceptor_variant: StrictBool = Field(alias="spliceAcceptorVariant")
    splice_donor_variant: StrictBool = Field(alias="spliceDonorVariant")
    splice_region_variant: StrictBool = Field(alias="spliceRegionVariant")
    stop_gained: StrictBool = Field(alias="stopGained")
    synonymous_variant: StrictBool = Field(alias="synonymousVariant")
    chromosome: Chromosome
    pos: StrictInt
    ref: StrictStr
    alt: StrictStr
    dataset_id: StrictStr = Field(alias="datasetId")
    __properties: ClassVar[List[str]] = ["variantId", "enhancer", "promoter", "openChromatinRegion", "promoterFlankingRegion", "ctcfBindingSite", "tfBindingSite", "3PrimeUtrVariant", "5PrimeUtrVariant", "frameshiftVariant", "intronVariant", "missenseVariant", "nonCodingTranscriptExonVariant", "spliceAcceptorVariant", "spliceDonorVariant", "spliceRegionVariant", "stopGained", "synonymousVariant", "chromosome", "pos", "ref", "alt", "datasetId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FunctionalAnnotation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FunctionalAnnotation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "variantId": obj.get("variantId"),
            "enhancer": obj.get("enhancer"),
            "promoter": obj.get("promoter"),
            "openChromatinRegion": obj.get("openChromatinRegion"),
            "promoterFlankingRegion": obj.get("promoterFlankingRegion"),
            "ctcfBindingSite": obj.get("ctcfBindingSite"),
            "tfBindingSite": obj.get("tfBindingSite"),
            "3PrimeUtrVariant": obj.get("3PrimeUtrVariant"),
            "5PrimeUtrVariant": obj.get("5PrimeUtrVariant"),
            "frameshiftVariant": obj.get("frameshiftVariant"),
            "intronVariant": obj.get("intronVariant"),
            "missenseVariant": obj.get("missenseVariant"),
            "nonCodingTranscriptExonVariant": obj.get("nonCodingTranscriptExonVariant"),
            "spliceAcceptorVariant": obj.get("spliceAcceptorVariant"),
            "spliceDonorVariant": obj.get("spliceDonorVariant"),
            "spliceRegionVariant": obj.get("spliceRegionVariant"),
            "stopGained": obj.get("stopGained"),
            "synonymousVariant": obj.get("synonymousVariant"),
            "chromosome": obj.get("chromosome"),
            "pos": obj.get("pos"),
            "ref": obj.get("ref"),
            "alt": obj.get("alt"),
            "datasetId": obj.get("datasetId")
        })
        return _obj


