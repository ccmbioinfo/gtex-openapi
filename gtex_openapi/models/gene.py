# coding: utf-8

"""
    GTEx Portal API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from gtex_openapi.models.app_models_responses_gencode_version import AppModelsResponsesGencodeVersion
from gtex_openapi.models.app_models_responses_genome_build import AppModelsResponsesGenomeBuild
from gtex_openapi.models.chromosome import Chromosome
from gtex_openapi.models.strand import Strand
from typing import Optional, Set
from typing_extensions import Self

class Gene(BaseModel):
    """
    Gene
    """ # noqa: E501
    chromosome: Chromosome
    data_source: StrictStr = Field(alias="dataSource")
    description: Optional[StrictStr] = None
    end: StrictInt
    entrez_gene_id: Optional[StrictStr] = Field(default=None, alias="entrezGeneId")
    gencode_id: StrictStr = Field(alias="gencodeId")
    gencode_version: AppModelsResponsesGencodeVersion = Field(alias="gencodeVersion")
    gene_status: StrictStr = Field(alias="geneStatus")
    gene_symbol: StrictStr = Field(alias="geneSymbol")
    gene_symbol_upper: StrictStr = Field(alias="geneSymbolUpper")
    gene_type: StrictStr = Field(alias="geneType")
    genome_build: AppModelsResponsesGenomeBuild = Field(alias="genomeBuild")
    start: StrictInt
    strand: Strand
    tss: StrictInt
    __properties: ClassVar[List[str]] = ["chromosome", "dataSource", "description", "end", "entrezGeneId", "gencodeId", "gencodeVersion", "geneStatus", "geneSymbol", "geneSymbolUpper", "geneType", "genomeBuild", "start", "strand", "tss"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Gene from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if entrez_gene_id (nullable) is None
        # and model_fields_set contains the field
        if self.entrez_gene_id is None and "entrez_gene_id" in self.model_fields_set:
            _dict['entrezGeneId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Gene from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chromosome": obj.get("chromosome"),
            "dataSource": obj.get("dataSource"),
            "description": obj.get("description"),
            "end": obj.get("end"),
            "entrezGeneId": obj.get("entrezGeneId"),
            "gencodeId": obj.get("gencodeId"),
            "gencodeVersion": obj.get("gencodeVersion"),
            "geneStatus": obj.get("geneStatus"),
            "geneSymbol": obj.get("geneSymbol"),
            "geneSymbolUpper": obj.get("geneSymbolUpper"),
            "geneType": obj.get("geneType"),
            "genomeBuild": obj.get("genomeBuild"),
            "start": obj.get("start"),
            "strand": obj.get("strand"),
            "tss": obj.get("tss")
        })
        return _obj


