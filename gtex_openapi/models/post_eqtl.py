# coding: utf-8

"""
    GTEx Portal API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from gtex_openapi.models.dataset_id import DatasetId
from gtex_openapi.models.error import Error
from gtex_openapi.models.nes import Nes
from gtex_openapi.models.pvalue import Pvalue
from gtex_openapi.models.pvaluethreshold import Pvaluethreshold
from gtex_openapi.models.tissue_site_detail_id import TissueSiteDetailId
from gtex_openapi.models.tstatistic import Tstatistic
from typing import Optional, Set
from typing_extensions import Self

class PostEqtl(BaseModel):
    """
    PostEqtl
    """ # noqa: E501
    dataset_id: DatasetId = Field(alias="datasetId")
    error: Error
    gencode_id: StrictStr = Field(alias="gencodeId")
    gene_symbol: Optional[StrictStr] = Field(default=None, alias="geneSymbol")
    message: Optional[StrictStr] = None
    nes: Nes
    p_value: Pvalue = Field(alias="pValue")
    p_value_threshold: Pvaluethreshold = Field(alias="pValueThreshold")
    snp_id: Optional[StrictStr] = Field(default=None, alias="snpId")
    t_statistic: Tstatistic = Field(alias="tStatistic")
    tissue_site_detail_id: TissueSiteDetailId = Field(alias="tissueSiteDetailId")
    variant_id: StrictStr = Field(alias="variantId")
    __properties: ClassVar[List[str]] = ["datasetId", "error", "gencodeId", "geneSymbol", "message", "nes", "pValue", "pValueThreshold", "snpId", "tStatistic", "tissueSiteDetailId", "variantId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostEqtl from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nes
        if self.nes:
            _dict['nes'] = self.nes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of p_value
        if self.p_value:
            _dict['pValue'] = self.p_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of p_value_threshold
        if self.p_value_threshold:
            _dict['pValueThreshold'] = self.p_value_threshold.to_dict()
        # override the default output from pydantic by calling `to_dict()` of t_statistic
        if self.t_statistic:
            _dict['tStatistic'] = self.t_statistic.to_dict()
        # set to None if gene_symbol (nullable) is None
        # and model_fields_set contains the field
        if self.gene_symbol is None and "gene_symbol" in self.model_fields_set:
            _dict['geneSymbol'] = None

        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        # set to None if snp_id (nullable) is None
        # and model_fields_set contains the field
        if self.snp_id is None and "snp_id" in self.model_fields_set:
            _dict['snpId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostEqtl from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "datasetId": obj.get("datasetId"),
            "error": Error.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "gencodeId": obj.get("gencodeId"),
            "geneSymbol": obj.get("geneSymbol"),
            "message": obj.get("message"),
            "nes": Nes.from_dict(obj["nes"]) if obj.get("nes") is not None else None,
            "pValue": Pvalue.from_dict(obj["pValue"]) if obj.get("pValue") is not None else None,
            "pValueThreshold": Pvaluethreshold.from_dict(obj["pValueThreshold"]) if obj.get("pValueThreshold") is not None else None,
            "snpId": obj.get("snpId"),
            "tStatistic": Tstatistic.from_dict(obj["tStatistic"]) if obj.get("tStatistic") is not None else None,
            "tissueSiteDetailId": obj.get("tissueSiteDetailId"),
            "variantId": obj.get("variantId")
        })
        return _obj


