# coding: utf-8

"""
    GTEx Portal API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from gtex_openapi.models.chromosome import Chromosome
from typing import Optional, Set
from typing_extensions import Self

class Variant(BaseModel):
    """
    Variant
    """ # noqa: E501
    snp_id: StrictStr = Field(alias="snpId")
    b37_variant_id: StrictStr = Field(alias="b37VariantId")
    pos: StrictInt
    maf01: StrictBool
    variant_id: StrictStr = Field(alias="variantId")
    alt: StrictStr
    chromosome: Chromosome
    snp_id_upper: StrictStr = Field(alias="snpIdUpper")
    dataset_id: StrictStr = Field(alias="datasetId")
    ref: StrictStr
    shorthand: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["snpId", "b37VariantId", "pos", "maf01", "variantId", "alt", "chromosome", "snpIdUpper", "datasetId", "ref", "shorthand"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Variant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if shorthand (nullable) is None
        # and model_fields_set contains the field
        if self.shorthand is None and "shorthand" in self.model_fields_set:
            _dict['shorthand'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Variant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "snpId": obj.get("snpId"),
            "b37VariantId": obj.get("b37VariantId"),
            "pos": obj.get("pos"),
            "maf01": obj.get("maf01"),
            "variantId": obj.get("variantId"),
            "alt": obj.get("alt"),
            "chromosome": obj.get("chromosome"),
            "snpIdUpper": obj.get("snpIdUpper"),
            "datasetId": obj.get("datasetId"),
            "ref": obj.get("ref"),
            "shorthand": obj.get("shorthand")
        })
        return _obj


