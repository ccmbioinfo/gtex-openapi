# coding: utf-8

"""
    GTEx Portal API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from gtex_openapi.models.functional_annotation import FunctionalAnnotation

class TestFunctionalAnnotation(unittest.TestCase):
    """FunctionalAnnotation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FunctionalAnnotation:
        """Test FunctionalAnnotation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FunctionalAnnotation`
        """
        model = FunctionalAnnotation()
        if include_optional:
            return FunctionalAnnotation(
                variant_id = '',
                enhancer = True,
                promoter = True,
                open_chromatin_region = True,
                promoter_flanking_region = True,
                ctcf_binding_site = True,
                tf_binding_site = True,
                var_3_prime_utr_variant = True,
                var_5_prime_utr_variant = True,
                frameshift_variant = True,
                intron_variant = True,
                missense_variant = True,
                non_coding_transcript_exon_variant = True,
                splice_acceptor_variant = True,
                splice_donor_variant = True,
                splice_region_variant = True,
                stop_gained = True,
                synonymous_variant = True,
                chromosome = 'chr1',
                pos = 56,
                ref = '',
                alt = '',
                dataset_id = ''
            )
        else:
            return FunctionalAnnotation(
                variant_id = '',
                enhancer = True,
                promoter = True,
                open_chromatin_region = True,
                promoter_flanking_region = True,
                ctcf_binding_site = True,
                tf_binding_site = True,
                var_3_prime_utr_variant = True,
                var_5_prime_utr_variant = True,
                frameshift_variant = True,
                intron_variant = True,
                missense_variant = True,
                non_coding_transcript_exon_variant = True,
                splice_acceptor_variant = True,
                splice_donor_variant = True,
                splice_region_variant = True,
                stop_gained = True,
                synonymous_variant = True,
                chromosome = 'chr1',
                pos = 56,
                ref = '',
                alt = '',
                dataset_id = '',
        )
        """

    def testFunctionalAnnotation(self):
        """Test FunctionalAnnotation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
