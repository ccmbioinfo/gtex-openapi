# coding: utf-8

"""
    GTEx Portal API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from gtex_openapi.models.meta_soft import MetaSoft

class TestMetaSoft(unittest.TestCase):
    """MetaSoft unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MetaSoft:
        """Test MetaSoft
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MetaSoft`
        """
        model = MetaSoft()
        if include_optional:
            return MetaSoft(
                gencode_id = '',
                dataset_id = 'gtex_v8',
                meta_p = 1.337,
                variant_id = '',
                tissues = {
                    'key' : gtex_openapi.models.tissue_level_metasoft_info.TissueLevelMetasoftInfo(
                        m_value = 1.337, 
                        p_value = 1.337, 
                        se = 1.337, 
                        nes = 1.337, )
                    }
            )
        else:
            return MetaSoft(
                gencode_id = '',
                dataset_id = 'gtex_v8',
                meta_p = 1.337,
                variant_id = '',
                tissues = {
                    'key' : gtex_openapi.models.tissue_level_metasoft_info.TissueLevelMetasoftInfo(
                        m_value = 1.337, 
                        p_value = 1.337, 
                        se = 1.337, 
                        nes = 1.337, )
                    },
        )
        """

    def testMetaSoft(self):
        """Test MetaSoft"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
